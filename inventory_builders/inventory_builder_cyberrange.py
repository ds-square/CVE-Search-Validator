import os
import re
import json
import math
import pymongo

from threading import Thread

import sympy

import xml.etree.ElementTree as ET

from neo4j import GraphDatabase



NO_VERSION = True
VERSION = True
SPLIT_VERSION = True
SPLIT_OPTIMIZATION = True



#"""
print("Retrieving Inventory data")

host_to_nvt_to_cve = dict()
host_to_plugin_to_cve = dict()

# Scan the folder for nessus and openvas files
CYBERRANGE_DATA_DIR = "CVE-Search-Validator/cyberrange"
CYBERRANGE_INPUT_DIR = CYBERRANGE_DATA_DIR+"/input"
CYBERRANGE_OUTPUT_DIR = CYBERRANGE_DATA_DIR+"/output"

for filename in os.listdir(CYBERRANGE_INPUT_DIR):
    # OPENVAS
    if "report-" in filename:
        f = os.path.join(CYBERRANGE_INPUT_DIR, filename)
        if os.path.isfile(f):

            # Grab openvas data from metafiles
            openvasscan = ET.parse(f)

            # Unwind openvas
            root = openvasscan.getroot()

            report = None
            for child in root:
                if child.tag == "report":
                    report = child
                    break

            results = None
            for child in report:
                if child.tag == "results":
                    results = child
                    break

            result_list = list()
            for child in results:
                result_list.append(child)

            host_to_nvt = dict()
            nvt_to_cve = dict()
            for result in result_list:

                host_id = ""
                nvt_id = ""

                for child in result:

                    if child.tag == "host":
                        host_id = child.text.strip()
                        if host_id not in host_to_nvt:
                            host_to_nvt[host_id] = set()

                    if child.tag == "nvt":
                        nvt_id = child.attrib["oid"]
                        if nvt_id not in nvt_to_cve:
                            nvt_to_cve[nvt_id] = set()

                        for nvtchild in child:
                            if nvtchild.tag == "refs":
                                for ref in nvtchild:
                                    if ref.attrib["type"] == "cve":
                                        nvt_to_cve[nvt_id].add(ref.attrib["id"])
                    
                if (host_id != "") and (nvt_id != ""):
                    host_to_nvt[host_id].add(nvt_id)

            old_host_to_nvt = host_to_nvt
            host_to_nvt = dict()
            for elem in old_host_to_nvt:
                if old_host_to_nvt[elem] != set():
                    host_to_nvt[elem] = list(old_host_to_nvt[elem])
            old_host_to_nvt = None

            old_nvt_to_cve = nvt_to_cve
            nvt_to_cve = dict()
            for elem in old_nvt_to_cve:
                if old_nvt_to_cve[elem] != set():
                    nvt_to_cve[elem] = list(old_nvt_to_cve[elem])
            old_nvt_to_cve = None

            for host in host_to_nvt:
                host_to_nvt_to_cve[host] = dict()
                for nvt in host_to_nvt[host]:
                    if nvt in nvt_to_cve:
                        host_to_nvt_to_cve[host][nvt] = nvt_to_cve[nvt]


    # NESSUS
    elif ".nessus" in filename:
        f = os.path.join(CYBERRANGE_INPUT_DIR, filename)
        if os.path.isfile(f):

            # Grab nessus data from metafiles
            nessusscan = ET.parse(f)

            # Unwind nessus
            root = nessusscan.getroot()
            report = None
            for child in root:
                if child.tag == "Report":
                    report = child
                    break

            host_list = list()
            for child in report:
                if child.tag == "ReportHost":
                    host_list.append(child)

            for host in host_list:
                host_id = host.attrib["name"]
                if host_id not in host_to_plugin_to_cve:
                    host_to_plugin_to_cve[host_id] = dict()

                for report in host:
                    if report.tag == "ReportItem":
                        plugin_id = report.attrib["pluginID"]
                        if plugin_id not in host_to_plugin_to_cve[host_id]:
                            host_to_plugin_to_cve[host_id][plugin_id] = set()

                        for item in report:
                            if item.tag == "cve":
                                host_to_plugin_to_cve[host_id][plugin_id].add(item.text.strip())



# Scan the folder for host device inventories
device_to_inventory_products = dict()
device_to_inventory_products_versions = dict()

for host_id in host_to_nvt_to_cve:
    p = os.path.join(CYBERRANGE_INPUT_DIR, "inventories", host_id+"_raw_device_inventory.txt")
    if os.path.isfile(p):
        f = open(file=p, mode="r", encoding="utf-8")
        raw_inventory = f.readlines()
        f.close()

        device_to_inventory_products[host_id] = set()
        device_to_inventory_products_versions[host_id] = dict()

        for line in raw_inventory:
            line = re.sub("[\s]+"," ",line).strip()
            line = line.split(" ")

            if len(line)==3 and (line[2] == "deb" or line[2] == "os"):
                device_to_inventory_products[host_id].add(line[0])
                if line[0] not in device_to_inventory_products_versions[host_id]:
                    device_to_inventory_products_versions[host_id][line[0]] = set()
                device_to_inventory_products_versions[host_id][line[0]].add(line[1])

                if "-" in line[0]:
                    splitline = line[0].split("-")
                    for spl in splitline:
                        if re.match("[\D]+",spl):
                            device_to_inventory_products[host_id].add(spl)
                            if spl not in device_to_inventory_products_versions[host_id]:
                                device_to_inventory_products_versions[host_id][spl] = set()
                            device_to_inventory_products_versions[host_id][spl].add(line[1])
                
                if "." in line[0]:
                    splitline = line[0].split(".")
                    for spl in splitline:
                        if re.match("[\D]+",spl):
                            device_to_inventory_products[host_id].add(spl)
                            if spl not in device_to_inventory_products_versions[host_id]:
                                device_to_inventory_products_versions[host_id][spl] = set()
                            device_to_inventory_products_versions[host_id][spl].add(line[1])
#"""



"""
# neo4j DB
DBuri = "bolt://localhost:7687"
#DBuri = "bolt://151.100.59.83:11763"
#DBuri = "bolt://awareserver.diag.uniroma1.it:11759"

# DB connection
DBdriver = GraphDatabase.driver(DBuri, auth=("neo4j", "password"), encrypted=False)
#DBdriver = GraphDatabase.driver(DBuri, auth=("vamp", "vamp"), encrypted=False)



def grab_glsa_to_cve(tx):
    result = dict()
    query = tx.run("MATCH (a:GLSA)-->(b:CVE) "+
                   "RETURN distinct a.id AS advisory, b.id AS cve")
    for record in query:
        if record["advisory"] not in result:
            result[record["advisory"]] = list()
        result[record["advisory"]].append(record["cve"])
    return result

def grab_nessus_to_cve(tx):
    result = dict()
    query = tx.run("MATCH (a:NessusPlugin)-->(b:CVE) "+
                   "RETURN distinct a.id AS advisory, b.id AS cve")
    for record in query:
        if record["advisory"] not in result:
            result[record["advisory"]] = list()
        result[record["advisory"]].append(record["cve"])
    return result
#"""


print("Retrieving DB data")
# Retrieving data from MongoDB
MongoDBuri = "mongodb://localhost:27017"
MongoDBclient = pymongo.MongoClient(MongoDBuri)

CVEMongoTable = MongoDBclient["VulnDB"]["CVE"].find()
GLSAMongoTable = MongoDBclient["VulnDB"]["GLSA"].find()
NessusMongoTable = MongoDBclient["VulnDB"]["NessusPlugin"].find()



mongo_cve_dict = dict()
for cve in CVEMongoTable:
    mongo_cve_dict[cve["id"]] = cve

mongo_glsa_dict = dict()
for advisory in GLSAMongoTable:
    mongo_glsa_dict[advisory["id"]] = advisory

mongo_nessus_dict = dict()
for advisory in NessusMongoTable:
    mongo_nessus_dict[advisory["id"]] = advisory



"""
# Retrieving data from Neo4j
with DBdriver.session() as DBsession:
    glsa_to_cve = DBsession.read_transaction(grab_glsa_to_cve)
    nessus_to_cve = DBsession.read_transaction(grab_nessus_to_cve)



print("Compiling reverse indexes")
# Reverse
cve_to_glsa = dict()
cve_to_nessus = dict()

for advisory in glsa_to_cve:
    for cve in glsa_to_cve[advisory]:
        if cve not in cve_to_glsa:
            cve_to_glsa[cve] = set()
        cve_to_glsa[cve].add(advisory)

for advisory in nessus_to_cve:
    for cve in nessus_to_cve[advisory]:
        if cve not in cve_to_nessus:
            cve_to_nessus[cve] = set()
        cve_to_nessus[cve].add(advisory)



# CVE sets
linked_cve_set = set()
glsa_cve_set = set()
nessus_cve_set = set()

for advisory in glsa_to_cve:
    for cve in glsa_to_cve[advisory]:
        linked_cve_set.add(cve)
        glsa_cve_set.add(cve)

for advisory in nessus_to_cve:
    for cve in nessus_to_cve[advisory]:
        linked_cve_set.add(cve)
        nessus_cve_set.add(cve)
#"""

# End database stuff



# Target set
print("Compiling target sets")
device_to_target_cve_set = dict()

target_cve_set = set()
target_nessus_advisory_set = set()
target_openvas_advisory_set = set()

cve_not_in_mongo_count = 0


for device in host_to_nvt_to_cve:
    if device not in device_to_target_cve_set:
        device_to_target_cve_set[device] = set()
    for advisory in host_to_nvt_to_cve[device]:
        target_openvas_advisory_set.add(advisory)
        for cve_id in host_to_nvt_to_cve[device][advisory]:
            if cve_id in mongo_cve_dict:
                device_to_target_cve_set[device].add(cve_id)
                target_cve_set.add(cve_id)
            else:
                cve_not_in_mongo_count += 1

for device in host_to_plugin_to_cve:
    if device not in device_to_target_cve_set:
        device_to_target_cve_set[device] = set()
    for advisory in host_to_plugin_to_cve[device]:
        target_nessus_advisory_set.add(advisory)
        for cve_id in host_to_plugin_to_cve[device][advisory]:
            if cve_id in mongo_cve_dict:
                device_to_target_cve_set[device].add(cve_id)
                target_cve_set.add(cve_id)
            else:
                cve_not_in_mongo_count += 1


print("#ADV NESSUS ",len(target_nessus_advisory_set))
print("#ADV OPENVAS ",len(target_openvas_advisory_set))
print("#CVE ",len(target_cve_set))
if cve_not_in_mongo_count > 0:
    print("WARN #CVE NOT IN MONGO ",cve_not_in_mongo_count)
#input("continue?")



print("Compiling cpe indexes")
def strip_cpe(cpe):
    cpe = cpe[cpe.find(":")+1:]
    cpe = cpe[cpe.find(":")+1:]
    part = cpe[:cpe.find(":")]
    cpe = cpe[cpe.find(":")+1:]
    vendor = cpe[:cpe.find(":")]
    cpe = cpe[cpe.find(":")+1:]
    product = cpe[:cpe.find(":")]
    cpe = cpe[cpe.find(":")+1:]
    version = cpe[:cpe.find(":")]
    
    newcpe = part+":"+vendor+":"+product+":"+version

    # CPE sanitization
    if "&" in newcpe:
        newcpe = newcpe.replace("&","")
    if "\\" in newcpe:
        newcpe = newcpe.replace("\\","")
    if "/" in newcpe:
        newcpe = newcpe.replace("/","")
        
    return newcpe


# CPE Dictionaries
cve_to_cpe_part_vendor_product_version = dict()
cve_to_cpe_part_vendor_product = dict()
cve_to_cpe_vendor_product = dict()
cve_to_cpe_vendor = dict()
cve_to_cpe = dict()

device_to_vendor_to_product_to_version = dict()

for device in device_to_target_cve_set:
    for cve_id in device_to_target_cve_set[device]:
        if cve_id in mongo_cve_dict:
            cve = mongo_cve_dict[cve_id]
            cve_to_cpe[cve_id] = list(set(cve["cpe_strings"]))

            part_vendor_product_version_set = set()
            part_vendor_product_set = set()
            vendor_product_set = set()
            vendor_set = set()

            for cpe in cve_to_cpe[cve_id]:
                cpe = strip_cpe(cpe)

                part = cpe[:cpe.find(":")]
                cpe = cpe[cpe.find(":")+1:]
                vendor = cpe[:cpe.find(":")]
                cpe = cpe[cpe.find(":")+1:]
                product = cpe[:cpe.find(":")]
                cpe = cpe[cpe.find(":")+1:]
                version = cpe

                part_vendor_product_version_set.add(part+":"+vendor+":"+product+":"+version)
                part_vendor_product_set.add(part+":"+vendor+":"+product)
                vendor_product_set.add(vendor+":"+product)
                vendor_set.add(vendor)

                if device not in device_to_vendor_to_product_to_version:
                    device_to_vendor_to_product_to_version[device] = dict()
                if vendor not in device_to_vendor_to_product_to_version[device]:
                    device_to_vendor_to_product_to_version[device][vendor] = dict()
                if product not in device_to_vendor_to_product_to_version[device][vendor]:
                    device_to_vendor_to_product_to_version[device][vendor][product] = set()
                device_to_vendor_to_product_to_version[device][vendor][product].add(version)

            if cve_id not in cve_to_cpe_part_vendor_product_version:
                cve_to_cpe_part_vendor_product_version[cve_id] = set()
                cve_to_cpe_part_vendor_product[cve_id] = set()
                cve_to_cpe_vendor_product[cve_id] = set()
                cve_to_cpe_vendor[cve_id] = set()
            cve_to_cpe_part_vendor_product_version[cve_id] = cve_to_cpe_part_vendor_product_version[cve_id].union(part_vendor_product_version_set)
            cve_to_cpe_part_vendor_product[cve_id] = cve_to_cpe_part_vendor_product[cve_id].union(part_vendor_product_set)
            cve_to_cpe_vendor_product[cve_id] = cve_to_cpe_vendor_product[cve_id].union(vendor_product_set)
            cve_to_cpe_vendor[cve_id] = cve_to_cpe_vendor[cve_id].union(vendor_set)



print("Compiling cpe dnf")
cpe_set = set()
for cve_id in mongo_cve_dict:
    cve = mongo_cve_dict[cve_id]
    for cpe in cve["cpe_strings"]:
        cpe_set.add(strip_cpe(cpe))

cpe_to_symbol = dict()
symbol_to_cpe = dict()
cpenum = 0
for cpe in cpe_set:
    symbol = sympy.symbols(str(cpenum))
    cpe_to_symbol[cpe] = symbol
    symbol_to_cpe[symbol] = cpe
    cpenum = cpenum + 1



# Boolean CNF encoding
def encode_to_boolean(cpe_config,debug=False):
    local_children_count = len(cpe_config["children"])
    local_cpe_count = len(cpe_config["cpe"])

    result = None

    if local_children_count > 0:
        is_first_child = True
        for child in cpe_config["children"]:
            if is_first_child:
                result = (encode_to_boolean(child,debug))
                is_first_child = False
            else:
                if cpe_config["operator"] == "OR":
                    result = sympy.Or(result, (encode_to_boolean(child,debug)))
                else:
                    result = sympy.And(result, (encode_to_boolean(child,debug)))

    if local_cpe_count > 0:
        is_first_cpe = True
        for cpe in cpe_config["cpe"]:
            if is_first_cpe:
                result = cpe_to_symbol[strip_cpe(cpe["cpe"])]
                is_first_cpe = False
            else:
                if cpe_config["operator"] == "OR":
                    result = sympy.Or(result, cpe_to_symbol[strip_cpe(cpe["cpe"])])
                else:
                    result = sympy.And(result, cpe_to_symbol[strip_cpe(cpe["cpe"])])
    
    return result


def encode_to_boolean_first_step(cpe_config_list,debug=False):
    if debug:
        print("- ",cpe_config_list)

    is_first_config = True
    result = None
    
    for config in cpe_config_list:
        if debug:
            print("> ",config,"//",len(config["cpe"]),"//",len(config["children"]))
        if (len(config["cpe"]) > 0) or (len(config["children"]) > 0):
            if is_first_config:
                if debug:
                    print("# first # ",result)
                result = (encode_to_boolean(config,debug))
                is_first_config = False
            else:
                if debug:
                    print("# not first # ",result)
                result = sympy.Or(result, (encode_to_boolean(config,debug)))
    return result


cve_to_cnf = dict()
cve_to_dnf = dict()
cve_to_cnf_symbol = dict()
cve_to_dnf_symbol = dict()

threadpool = list()


def thread_worker(cve_id):
    print(cve_id," START")
    cve = mongo_cve_dict[cve_id]

    """
    # Debug!
    encoded_configurations = None
    if cve_id == "CVE-2018-0315":
        encoded_configurations = encode_to_boolean_first_step(cve["cpe_configurations"],True)
        input("breakpoint!")
    else:
        encoded_configurations = encode_to_boolean_first_step(cve["cpe_configurations"],False)
    #"""

    encoded_configurations = encode_to_boolean_first_step(cve["cpe_configurations"],False)

    if encoded_configurations != None:
        encoded_configurations = sympy.logic.simplify_logic(encoded_configurations)
    #cnf_cpe = sympy.to_cnf(encoded_configurations)
    dnf_cpe = sympy.to_dnf(encoded_configurations)
    
    # Side effect
    if dnf_cpe != None:
        #cve_to_cnf_symbol[cve_id] = cnf_cpe
        cve_to_dnf_symbol[cve_id] = dnf_cpe

    print(cve_id," END")
    #return cve_id,dnf_cpe


#"""
# Multithread
print("Starting threads")
for cve_id in target_cve_set:
    threadpool.append(Thread(target=thread_worker,args=(cve_id,)))

for thread in threadpool:
    thread.start()

for thread in threadpool:
    thread.join()
#"""

"""
# Singleprocess
for cve_id in target_cve_set:
    thread_worker(cve_id)

    #if cve_id in cve_to_dnf_symbol:
        #cnf = cve_to_cnf_symbol[cve_id]
        #dnf = cve_to_dnf_symbol[cve_id]
        #print("CN-",cve_to_cnf[cve_id])
        #print("CS-",sympy.logic.simplify_logic(cnf))
        #print("DN-",dnf)
        #print("DS-",sympy.logic.simplify_logic(dnf))
#"""



#"""
# Decode symbolic cpe
for cve_id in cve_to_dnf_symbol:
    #"""

    """
    formula = cve_to_cnf_symbol[cve_id]
    formula = " "+str(formula)+" "
    formula = formula.replace("(","( ")
    formula = formula.replace(")"," )")

    work_formula = formula.replace("(","")
    work_formula = work_formula.replace(")","")
    work_formula = work_formula.replace("|","")
    work_formula = work_formula.replace("&","")
    
    work_splitformula = work_formula.strip().split(" ")

    for work_split in work_splitformula:
        if work_split != "":
            work_split = work_split.strip()
            if sympy.symbols(work_split) in symbol_to_cpe:
                formula = formula.replace(" "+work_split+" "," "+symbol_to_cpe[sympy.symbols(work_split)]+" ",1)

    cve_to_cnf[cve_id] = formula
    #"""

#"""
    formula = cve_to_dnf_symbol[cve_id]
    formula = " "+str(formula)+" "
    formula = formula.replace("(","( ")
    formula = formula.replace(")"," )")
    
    work_formula = formula.replace("(","")
    work_formula = work_formula.replace(")","")
    work_formula = work_formula.replace("|","")
    work_formula = work_formula.replace("&","")

    work_splitformula = work_formula.strip().split(" ")

    for work_split in work_splitformula:
        if work_split != "":
            work_split = work_split.strip()

            if sympy.symbols(work_split) in symbol_to_cpe:
                formula = formula.replace(" "+work_split+" "," "+symbol_to_cpe[sympy.symbols(work_split)]+" ",1)
    
    cve_to_dnf[cve_id] = formula.strip()
#"""



#"""
# Structure CPE tree
target_cpe_set = set()
cve_to_dnf_tree = dict()

for cve in cve_to_dnf:
    cve_to_dnf_tree[cve] = list()

    work_formula = cve_to_dnf[cve]

    or_split = work_formula.split("|")
    for elem in or_split:
        and_set = set()

        and_split = elem.replace("(","").replace(")","").strip().split("&")
        for elem2 in and_split:
            elem2 = elem2.strip()
            and_set.add(elem2)
            target_cpe_set.add(elem2)

        cve_to_dnf_tree[cve].append(list(and_set))
#"""



# Compare versions
def version_compare(current,condition):
    #print("START")
    #print(current," : ",condition)

    # Define operator
    operator = "="
    if condition.startswith(">="):
        operator = ">="
        condition = condition.replace(">= ","")
    elif condition.startswith("<="):
        operator = "<="
        condition = condition.replace("<= ","")
    elif condition.startswith(">"):
        operator = ">"
        condition = condition.replace("> ","")
    elif condition.startswith("<"):
        operator = "<"
        condition = condition.replace("< ","")

    #print(current," : ",condition)

    # Version to number
    current_number = version_to_number(current)
    condition_number = version_to_number(condition)

    #print(current," : ",condition)

    # Perform operation function
    def perform_operation(elem1,elem2,operator):

        if operator == "=":
            return elem1 == elem2
        elif operator == ">=":
            return elem1 >= elem2
        elif operator == "<=":
            return elem1 <= elem2
        elif operator == ">":
            return elem1 > elem2
        elif operator == "<":
            return elem1 < elem2
        # Return check, strictcheck
        # Example <=, <
        # If second return is true, don't go further
        return False
    
    # Perform op
    return perform_operation(current_number,condition_number,operator)



# Version to numerical encoding
def strip_version(version):
    return re.sub(r"[^0-9.]","",version).strip()



# Version to numerical encoding
def version_to_number(version):
    retnum = 0

    # I assume to have versions, subversions and such up to 100
    # I also assume atmost a depth 4 subversion
    maxvers = 100
    maxdepth = 4

    # Ignore non numeric stuff
    version = strip_version(version)
    #print(version)

    # Split the dots
    splitversion = version.split(".")
    for index in range(len(splitversion)):
        #print(index)
        if (index < maxdepth) and splitversion[index].strip().isnumeric():
            elem = int(splitversion[index].strip())
            retnum = retnum + (elem*math.pow(maxvers,(maxdepth-index-1)))
            #print(elem,(elem*math.pow(maxvers,(maxdepth-index-1))))

    #print(retnum)

    return int(retnum)



# FORMAT OUTPUT
def format_output(current_host_to_advisory_to_cve, current_host_to_inventory_products, current_cve_to_dnf_tree, current_cve_to_cpe_part_vendor_product_version, USE_VERSION):

    def ignore_version_on_dnf_tree(node):
        if (USE_VERSION == True):
            return node
        
        work_node = set()
        for and_cpe in node:
            new_and_cpe = set()
            for cpe in and_cpe:
                new_cpe = cpe[:cpe.rfind(":")]
                new_and_cpe.add(new_cpe)
            work_node.add(frozenset(new_and_cpe))

        new_node = list()
        for elem in work_node:
            new_node.append(list(elem))

        return list(new_node)


    out_device_to_target_cve_set = dict()
    out_device_to_advisory_to_cve = dict()
    for device in current_host_to_advisory_to_cve:
        out_device_to_target_cve_set[device] = set()
        out_device_to_advisory_to_cve[device] = dict()
        for advisory in current_host_to_advisory_to_cve[device]:

            if advisory not in out_device_to_advisory_to_cve[device]:
                out_device_to_advisory_to_cve[device][advisory] = set()

            for cve in current_host_to_advisory_to_cve[device][advisory]:
                if cve in target_cve_set:
                    out_device_to_target_cve_set[device].add(cve)
                    out_device_to_advisory_to_cve[device][advisory].add(cve)


    for device in out_device_to_advisory_to_cve:
        for advisory in out_device_to_advisory_to_cve[device]:
            out_device_to_advisory_to_cve[device][advisory] = list(out_device_to_advisory_to_cve[device][advisory])


    out_device_to_cve_to_cpe = dict()
    for device in out_device_to_target_cve_set:
        out_device_to_cve_to_cpe[device] = dict()
        for cve in out_device_to_target_cve_set[device]:
            if cve in current_cve_to_dnf_tree:
                out_device_to_cve_to_cpe[device][cve] = ignore_version_on_dnf_tree(current_cve_to_dnf_tree[cve])


    out_device_to_cpe_to_advisory = dict()
    for device in current_host_to_advisory_to_cve:
        if device not in out_device_to_cpe_to_advisory:
            out_device_to_cpe_to_advisory[device] = dict()
        for advisory in current_host_to_advisory_to_cve[device]:
            for cve in current_host_to_advisory_to_cve[device][advisory]:
                if cve in current_cve_to_dnf_tree:
                    for and_cpe in ignore_version_on_dnf_tree(current_cve_to_dnf_tree[cve]):
                        for cpe in and_cpe:
                            if cpe not in out_device_to_cpe_to_advisory[device]:
                                out_device_to_cpe_to_advisory[device][cpe] = set()
                            out_device_to_cpe_to_advisory[device][cpe].add(advisory)


    for device in out_device_to_advisory_to_cve:
        for cpe in out_device_to_cpe_to_advisory[device]:
            out_device_to_cpe_to_advisory[device][cpe] = list(out_device_to_cpe_to_advisory[device][cpe])


    out_device_to_cpe_inventory = dict()
    for device in out_device_to_target_cve_set:
        out_device_to_cpe_inventory[device] = dict()
        for cve in out_device_to_target_cve_set[device]:
            if cve in current_cve_to_cpe_part_vendor_product_version:
                for cpe in current_cve_to_cpe_part_vendor_product_version[cve]:
                    out_device_to_cpe_inventory[device][cpe] = "unknown"


    out_device_to_cpe_inventory_inert = dict()
    for device in out_device_to_target_cve_set:
        out_device_to_cpe_inventory_inert[device] = dict()
        for cve in out_device_to_target_cve_set[device]:
            if cve in current_cve_to_cpe_part_vendor_product_version:
                for cpe in current_cve_to_cpe_part_vendor_product_version[cve]:
                    product = cpe.split(":")[2]
                    if (device in current_host_to_inventory_products) and (product in current_host_to_inventory_products[device]):
                        # We have product
                        if (USE_VERSION == True):
                            # Compare versions
                            version = cpe.split(":")[3]
                            for version_current in current_host_to_inventory_products[device][product]:
                                # Check if version is bounded by two operators
                                if ";" in version:
                                    # Double operator, perform check twice
                                    partial_version = version.split(";")
                                    if version_compare(version_current,partial_version[0].strip()) and version_compare(version_current,partial_version[1].strip()):
                                        out_device_to_cpe_inventory_inert[device][cpe] = "confirmed"
                                    else:
                                        out_device_to_cpe_inventory_inert[device][cpe] = "discarded"
                                else:
                                    # Single operator
                                    if version_compare(version_current,version) == True:
                                        out_device_to_cpe_inventory_inert[device][cpe] = "confirmed"
                                    else:
                                        out_device_to_cpe_inventory_inert[device][cpe] = "discarded"
                        else:
                            # No version check needed
                            out_device_to_cpe_inventory_inert[device][cpe] = "confirmed"
                    else:
                        out_device_to_cpe_inventory_inert[device][cpe] = "discarded"

    return out_device_to_target_cve_set,out_device_to_advisory_to_cve,out_device_to_cve_to_cpe,out_device_to_cpe_to_advisory,out_device_to_cpe_inventory,out_device_to_cpe_inventory_inert




def format_output_segmented_version(current_host_to_advisory_to_cve, current_host_to_inventory_products, current_cve_to_dnf_tree, current_cve_to_cpe_part_vendor_product_version, current_device_to_vendor_to_product_to_version, SEGMENT_OPTIMIZATION):

    # Outputs need to be:
    # out_device_to_target_cve_set      - ok
    # out_device_to_advisory_to_cve     - ok

    # out_device_to_cve_to_cpe_dnf_tree - nok
    # out_device_to_cpe_to_advisory     - nok

    # out_device_to_cpe_inventory       - nok
    # out_device_to_cpe_inventory_inert - nok



    # Build out_device_to_advisory_to_cve
    out_device_to_advisory_to_cve = dict()
    for device in current_host_to_advisory_to_cve:
        out_device_to_advisory_to_cve[device] = dict()
        for advisory in current_host_to_advisory_to_cve[device]:
            out_device_to_advisory_to_cve[device][advisory] = set()
            for cve in current_host_to_advisory_to_cve[device][advisory]:
                out_device_to_advisory_to_cve[device][advisory].add(cve)
            out_device_to_advisory_to_cve[device][advisory] = list(out_device_to_advisory_to_cve[device][advisory])


    # Build out_device_to_target_cve_set
    out_device_to_target_cve_set = dict()
    for device in current_host_to_advisory_to_cve:
        out_device_to_target_cve_set[device] = set()
        for advisory in current_host_to_advisory_to_cve[device]:
            for cve in current_host_to_advisory_to_cve[device][advisory]:
                out_device_to_target_cve_set[device].add(cve)
        out_device_to_target_cve_set[device] = list(out_device_to_target_cve_set[device])



    # Now comes the hard part

    # Need to change current_cve_to_dnf_tree
    # Need to change current_cve_to_cpe_part_vendor_product_version
    # Use current_device_to_vendor_to_product_to_version to calculate segments

    # Also remember to apply segment optimization if possible

    # Only useful if done locally on the host
    # Grab the intervals and the single values
    # Grab the boundaries
    # Note that a boundary may not be part of a valid version
    # Also grab the single value's operands
    temp_device_to_vendor_to_product_to_version_interval = dict()
    temp_device_to_vendor_to_product_to_version_single = dict()
    temp_device_to_vendor_to_product_to_version_boundary = dict()
    temp_device_to_vendor_to_product_to_version_boundary_operand = dict()
    for device in current_device_to_vendor_to_product_to_version:
        temp_device_to_vendor_to_product_to_version_interval[device] = dict()
        temp_device_to_vendor_to_product_to_version_single[device] = dict()
        temp_device_to_vendor_to_product_to_version_boundary[device] = dict()
        temp_device_to_vendor_to_product_to_version_boundary_operand[device] = dict()
        for vendor in current_device_to_vendor_to_product_to_version[device]:
            temp_device_to_vendor_to_product_to_version_interval[device][vendor] = dict()
            temp_device_to_vendor_to_product_to_version_single[device][vendor] = dict()
            temp_device_to_vendor_to_product_to_version_boundary[device][vendor] = dict()
            temp_device_to_vendor_to_product_to_version_boundary_operand[device][vendor] = dict()
            for product in current_device_to_vendor_to_product_to_version[device][vendor]:
                temp_device_to_vendor_to_product_to_version_interval[device][vendor][product] = set()
                temp_device_to_vendor_to_product_to_version_single[device][vendor][product] = set()
                temp_device_to_vendor_to_product_to_version_boundary[device][vendor][product] = set()
                temp_device_to_vendor_to_product_to_version_boundary_operand[device][vendor][product] = dict()
                for version_struct in current_device_to_vendor_to_product_to_version[device][vendor][product]:
                    
                    if len(version_struct.split(";")) == 1:
                        # Possible interval, just a single value

                        # Handle 0 - inf cases
                        if ("<" in version_struct) or ("<=" in version_struct):
                            version_no_operand = version_struct.replace("<","").replace("=","").strip()
                            version_operand = "<"
                            if "=" in version_struct:
                                version_operand = "<="

                            if SEGMENT_OPTIMIZATION == True:
                                #temp_device_to_vendor_to_product_to_version_single[device][vendor][product].add("0")
                                temp_device_to_vendor_to_product_to_version_boundary[device][vendor][product].add("0")

                                if "0" not in temp_device_to_vendor_to_product_to_version_boundary_operand[device][vendor][product]:
                                    temp_device_to_vendor_to_product_to_version_boundary_operand[device][vendor][product]["0"] = set()
                                temp_device_to_vendor_to_product_to_version_boundary_operand[device][vendor][product]["0"].add(">=")

                                temp_device_to_vendor_to_product_to_version_boundary[device][vendor][product].add(version_no_operand)
                                #if "=" not in version_operand:
                                    #temp_device_to_vendor_to_product_to_version_single[device][vendor][product].add(version_no_operand)

                                if version_no_operand not in temp_device_to_vendor_to_product_to_version_boundary_operand[device][vendor][product]:
                                    temp_device_to_vendor_to_product_to_version_boundary_operand[device][vendor][product][version_no_operand] = set()
                                temp_device_to_vendor_to_product_to_version_boundary_operand[device][vendor][product][version_no_operand].add(version_operand)

                                temp_device_to_vendor_to_product_to_version_interval[device][vendor][product].add(">= 0; "+version_operand+" "+version_no_operand)

                            else:
                                temp_device_to_vendor_to_product_to_version_boundary[device][vendor][product].add("0")
                                temp_device_to_vendor_to_product_to_version_boundary[device][vendor][product].add(version_no_operand)

                                temp_device_to_vendor_to_product_to_version_single[device][vendor][product].add("0")
                                if "=" in version_operand:
                                    temp_device_to_vendor_to_product_to_version_single[device][vendor][product].add(version_no_operand)

                                temp_device_to_vendor_to_product_to_version_interval[device][vendor][product].add("> 0; < "+version_no_operand)
                            
                        elif (">" in version_struct) or (">=" in version_struct):
                            version_no_operand = version_struct.replace(">","").replace("=","").strip()
                            version_operand = ">"
                            if "=" in version_struct:
                                version_operand = ">="

                            if SEGMENT_OPTIMIZATION == True:
                                #temp_device_to_vendor_to_product_to_version_single[device][vendor][product].add("99.99.99.99")
                                temp_device_to_vendor_to_product_to_version_boundary[device][vendor][product].add("99.99.99.99")

                                if "99.99.99.99" not in temp_device_to_vendor_to_product_to_version_boundary_operand[device][vendor][product]:
                                    temp_device_to_vendor_to_product_to_version_boundary_operand[device][vendor][product]["99.99.99.99"] = set()
                                temp_device_to_vendor_to_product_to_version_boundary_operand[device][vendor][product]["99.99.99.99"].add("<=")

                                temp_device_to_vendor_to_product_to_version_boundary[device][vendor][product].add(version_no_operand)
                                #if "=" not in version_operand:
                                    #temp_device_to_vendor_to_product_to_version_single[device][vendor][product].add(version_no_operand)

                                if version_no_operand not in temp_device_to_vendor_to_product_to_version_boundary_operand[device][vendor][product]:
                                    temp_device_to_vendor_to_product_to_version_boundary_operand[device][vendor][product][version_no_operand] = set()
                                temp_device_to_vendor_to_product_to_version_boundary_operand[device][vendor][product][version_no_operand].add(version_operand)

                                temp_device_to_vendor_to_product_to_version_interval[device][vendor][product].add(version_operand+" "+version_no_operand+"; <= 99.99.99.99")

                            else:
                                temp_device_to_vendor_to_product_to_version_boundary[device][vendor][product].add("99.99.99.99")
                                temp_device_to_vendor_to_product_to_version_boundary[device][vendor][product].add(version_no_operand)

                                temp_device_to_vendor_to_product_to_version_single[device][vendor][product].add("99.99.99.99")
                                if "=" in version_operand:
                                    temp_device_to_vendor_to_product_to_version_single[device][vendor][product].add(version_no_operand)

                                temp_device_to_vendor_to_product_to_version_interval[device][vendor][product].add("> "+version_no_operand+"; < 99.99.99.99")

                        else:
                            # Only one version, no interval
                            version_no_operand = version_struct.strip()

                            if SEGMENT_OPTIMIZATION == True:
                                temp_device_to_vendor_to_product_to_version_single[device][vendor][product].add(version_no_operand)
                                temp_device_to_vendor_to_product_to_version_boundary[device][vendor][product].add(version_no_operand)

                                if version_no_operand not in temp_device_to_vendor_to_product_to_version_boundary_operand[device][vendor][product]:
                                    temp_device_to_vendor_to_product_to_version_boundary_operand[device][vendor][product][version_no_operand] = set()
                                temp_device_to_vendor_to_product_to_version_boundary_operand[device][vendor][product][version_no_operand].add("=")

                            else:
                                temp_device_to_vendor_to_product_to_version_single[device][vendor][product].add(version_no_operand)
                                temp_device_to_vendor_to_product_to_version_boundary[device][vendor][product].add(version_no_operand)


                    else:
                        # Proper intervals
                        # As in len(version_struct.split(";")) > 1

                        split_version = version_struct.split(";")
                        version_0 = split_version[0].strip()
                        version_1 = split_version[1].strip()
                        version_no_operand_0 = version_0.replace(">","").replace("<","").replace("=","").strip()
                        version_no_operand_1 = version_1.replace(">","").replace("<","").replace("=","").strip()
                        version_operand_0 = version_0.split(" ")[0].strip()
                        version_operand_1 = version_1.split(" ")[0].strip()
                        version_numeric_0 = version_to_number(version_no_operand_0)
                        version_numeric_1 = version_to_number(version_no_operand_1)

                        # Check interval order
                        if version_numeric_0 > version_numeric_1:
                            temp = version_0
                            temp_no_operand = version_no_operand_0
                            temp_operand = version_operand_0
                            temp_numeric = version_numeric_0

                            version_0 = version_1
                            version_no_operand_0 = version_no_operand_1
                            version_operand_0 = version_operand_1
                            version_numeric_0 = version_numeric_1

                            version_1 = temp
                            version_no_operand_1 = temp_no_operand
                            version_operand_1 = temp_operand
                            version_numeric_1 = temp_numeric

                        #print(version_operand_0+"/"+version_no_operand_0+"/"+version_operand_1+"/"+version_no_operand_1)
                        
                        if SEGMENT_OPTIMIZATION == True:
                            temp_device_to_vendor_to_product_to_version_boundary[device][vendor][product].add(version_no_operand_0)
                            #if "=" not in version_operand_0:
                                #temp_device_to_vendor_to_product_to_version_single[device][vendor][product].add(version_no_operand_0)

                            if version_no_operand_0 not in temp_device_to_vendor_to_product_to_version_boundary_operand[device][vendor][product]:
                                temp_device_to_vendor_to_product_to_version_boundary_operand[device][vendor][product][version_no_operand_0] = set()
                            temp_device_to_vendor_to_product_to_version_boundary_operand[device][vendor][product][version_no_operand_0].add(version_operand_0)

                            temp_device_to_vendor_to_product_to_version_boundary[device][vendor][product].add(version_no_operand_1)
                            #if "=" not in version_operand_1:
                                #temp_device_to_vendor_to_product_to_version_single[device][vendor][product].add(version_no_operand_1)

                            if version_no_operand_1 not in temp_device_to_vendor_to_product_to_version_boundary_operand[device][vendor][product]:
                                temp_device_to_vendor_to_product_to_version_boundary_operand[device][vendor][product][version_no_operand_1] = set()
                            temp_device_to_vendor_to_product_to_version_boundary_operand[device][vendor][product][version_no_operand_1].add(version_operand_1)

                            temp_device_to_vendor_to_product_to_version_interval[device][vendor][product].add(version_operand_0+" "+version_no_operand_0+"; "+version_operand_1+" "+version_no_operand_1)

                        else:
                            temp_device_to_vendor_to_product_to_version_boundary[device][vendor][product].add(version_no_operand_0)
                            temp_device_to_vendor_to_product_to_version_boundary[device][vendor][product].add(version_no_operand_1)

                            if "=" in version_operand_0:
                                temp_device_to_vendor_to_product_to_version_single[device][vendor][product].add(version_no_operand_0)
                            if "=" in version_operand_1:
                                temp_device_to_vendor_to_product_to_version_single[device][vendor][product].add(version_no_operand_1)

                            temp_device_to_vendor_to_product_to_version_interval[device][vendor][product].add(version_operand_0.replace("=","")+" "+version_no_operand_0+"; "+version_operand_1.replace("=","")+" "+version_no_operand_1)



    # Now we should have, for each host, vendor and product:
    # - A list of boundaries with their operands
    # - A list of intervals ( > version ; < version )
    # - A list of fullstops included in the logic formulas ( == version)
    #
    # temp_device_to_vendor_to_product_to_version_single
    # temp_device_to_vendor_to_product_to_version_interval
    # temp_device_to_vendor_to_product_to_version_boundary
    # temp_device_to_vendor_to_product_to_version_boundary_operand
    #
    """
    print("#### A ####")
    for device in temp_device_to_vendor_to_product_to_version_interval:
        print("")
        print(device)
        print("OLD",current_device_to_vendor_to_product_to_version[device])
        print("NEW_S",temp_device_to_vendor_to_product_to_version_single[device])
        print("NEW_I",temp_device_to_vendor_to_product_to_version_interval[device])
        input("?")
    #"""
    #
    # Notice that the intervals that we have might need to be segmented a bit more, due to alignment
    # So we'll use the boundaries to segment the intervals



    segmented_device_to_vendor_to_product_to_version_interval = dict()
    for device in temp_device_to_vendor_to_product_to_version_interval:
        segmented_device_to_vendor_to_product_to_version_interval[device] = dict()
        for vendor in temp_device_to_vendor_to_product_to_version_interval[device]:
            segmented_device_to_vendor_to_product_to_version_interval[device][vendor] = dict()
            for product in temp_device_to_vendor_to_product_to_version_interval[device][vendor]:
                segmented_device_to_vendor_to_product_to_version_interval[device][vendor][product] = set()

                # Here we now take the bigger intervals and we splice them using the boundaries
                sorted_boundaries = sorted(list(temp_device_to_vendor_to_product_to_version_boundary[device][vendor][product]),key=version_to_number)
                for biginterval in temp_device_to_vendor_to_product_to_version_interval[device][vendor][product]:
                    
                    # Step 0, we split the interval up in the two bounds
                    split_version = biginterval.split(";")
                    version_0 = split_version[0].strip()
                    version_1 = split_version[1].strip()
                    version_no_operand_0 = version_0.replace(">","").replace("<","").replace("=","").strip()
                    version_no_operand_1 = version_1.replace(">","").replace("<","").replace("=","").strip()
                    version_operand_0 = version_0.split(" ")[0].strip()
                    version_operand_1 = version_1.split(" ")[0].strip()

                    # Need to iterate over the boundary list
                    version_0_numeric = version_to_number(version_no_operand_0)
                    version_1_numeric = version_to_number(version_no_operand_1)

                    intra_bounds = list()
                    for bound in sorted_boundaries:
                        bound_numeric = version_to_number(bound)

                        # As a consequence of construction, version_0 and version_1 should have a value "bound" for witch they are ==
                        # This means we will only consider stricly < or > bound values
                        if (bound_numeric > version_0_numeric) and (bound_numeric < version_1_numeric):
                            intra_bounds.append(bound)

                            
                    # Use the intra_bounds to split up the big interval
                    last_bound = version_no_operand_0
                    last_bound_operand = version_operand_0
                    if version_no_operand_0 in temp_device_to_vendor_to_product_to_version_single[device][vendor][product]:
                        last_bound_operand = version_operand_0.replace("=","")
                    for bound in intra_bounds:
                        # Add new interval

                        if SEGMENT_OPTIMIZATION == True:
                            # Bound logic goes here
                            #
                            # If one operand in the boundary
                            # - <= or > will lead to <= and then >
                            # - < or >= will lead to < and then >=
                            # - ee will lead to < and then > + add the single
                            #
                            # If two operands in the boundary
                            # - <= and >  will lead to <= and then >
                            # - < and >= will lead to < and then >=
                            # - ee will lead to < and then > + add the single

                            if len(temp_device_to_vendor_to_product_to_version_boundary_operand[device][vendor][product][bound]) == 1:
                                if (">" in temp_device_to_vendor_to_product_to_version_boundary_operand[device][vendor][product][bound]) or ("<=" in temp_device_to_vendor_to_product_to_version_boundary_operand[device][vendor][product][bound]):
                                    segmented_device_to_vendor_to_product_to_version_interval[device][vendor][product].add(last_bound_operand+" "+last_bound+"; "+"<= "+bound)
                                    last_bound_operand = ">"
                                elif ("<" in temp_device_to_vendor_to_product_to_version_boundary_operand[device][vendor][product][bound]) or (">=" in temp_device_to_vendor_to_product_to_version_boundary_operand[device][vendor][product][bound]):
                                    segmented_device_to_vendor_to_product_to_version_interval[device][vendor][product].add(last_bound_operand+" "+last_bound+"; "+"< "+bound)
                                    last_bound_operand = ">="
                                else:
                                    segmented_device_to_vendor_to_product_to_version_interval[device][vendor][product].add(last_bound_operand+" "+last_bound+"; "+"< "+bound)
                                    temp_device_to_vendor_to_product_to_version_single[device][vendor][product].add(bound)
                                    last_bound_operand = ">"
                            elif len(temp_device_to_vendor_to_product_to_version_boundary_operand[device][vendor][product][bound]) == 2:
                                if ((">" in temp_device_to_vendor_to_product_to_version_boundary_operand[device][vendor][product][bound]) and ("<=" in temp_device_to_vendor_to_product_to_version_boundary_operand[device][vendor][product][bound])):
                                    segmented_device_to_vendor_to_product_to_version_interval[device][vendor][product].add(last_bound_operand+" "+last_bound+"; "+"<= "+bound)
                                    last_bound_operand = ">"
                                elif ((">=" in temp_device_to_vendor_to_product_to_version_boundary_operand[device][vendor][product][bound]) and ("<" in temp_device_to_vendor_to_product_to_version_boundary_operand[device][vendor][product][bound])):
                                    segmented_device_to_vendor_to_product_to_version_interval[device][vendor][product].add(last_bound_operand+" "+last_bound+"; "+"< "+bound)
                                    last_bound_operand = ">="
                                else:
                                    segmented_device_to_vendor_to_product_to_version_interval[device][vendor][product].add(last_bound_operand+" "+last_bound+"; "+"< "+bound)
                                    temp_device_to_vendor_to_product_to_version_single[device][vendor][product].add(bound)
                                    last_bound_operand = ">"
                            else:
                                segmented_device_to_vendor_to_product_to_version_interval[device][vendor][product].add(last_bound_operand+" "+last_bound+"; "+"< "+bound)
                                temp_device_to_vendor_to_product_to_version_single[device][vendor][product].add(bound)
                                last_bound_operand = ">"

                        else:
                            segmented_device_to_vendor_to_product_to_version_interval[device][vendor][product].add(last_bound_operand.replace("=","")+" "+last_bound+"; "+"< "+bound)
                            temp_device_to_vendor_to_product_to_version_single[device][vendor][product].add(bound)
                            last_bound_operand = ">"

                        last_bound = bound
                    # Last iteration
                    # In theory if intra_bounds is empty, this should copy the old interval
                    if SEGMENT_OPTIMIZATION == True:
                        if version_no_operand_1 in temp_device_to_vendor_to_product_to_version_single[device][vendor][product]:
                            version_operand_1 = version_operand_1.replace("=","")
                        segmented_device_to_vendor_to_product_to_version_interval[device][vendor][product].add(last_bound_operand+" "+last_bound+"; "+version_operand_1+" "+version_no_operand_1)
                    else:
                        segmented_device_to_vendor_to_product_to_version_interval[device][vendor][product].add(last_bound_operand.replace("=","")+" "+last_bound+"; "+version_operand_1+" "+version_no_operand_1)



    # Now we should have, for each host, vendor and product:
    # - A list of boundaries with their corrected operands
    # - A list of corrected intervals ( > version ; < version )
    # - A list of corrected fullstops included in the logic formulas ( == version)
    #
    # temp_device_to_vendor_to_product_to_version_single            - added split between segments
    # segmented_device_to_vendor_to_product_to_version_interval     - corrected with more segments
    # temp_device_to_vendor_to_product_to_version_boundary          - untouched
    # temp_device_to_vendor_to_product_to_version_boundary_operand  - corrected with >= and <= for each additional segment
    #
    """
    print("#### B ####")
    for device in segmented_device_to_vendor_to_product_to_version_interval:
        print("")
        print(device)
        print("OLD",current_device_to_vendor_to_product_to_version[device])
        print("NEW_S",temp_device_to_vendor_to_product_to_version_single[device])
        print("NEW_I",segmented_device_to_vendor_to_product_to_version_interval[device])
        input("?")
    #"""
    #
    # Now we can start to work on:
    # - out_device_to_cpe_to_advisory
    # - out_device_to_cve_to_cpe_dnf_tree
                        


    # Helper function to compare and split intervals
    def segment_interval(original_interval,singles_list,interval_list):
        out_singles = set()
        out_interval = set()

        #print("ORIG:",original_interval)

        orig_split = original_interval.split(";")
        orig_0 = orig_split[0].strip()
        orig_1 = orig_split[1].strip()
        orig_no_operand_0 = orig_0.replace(">","").replace("<","").replace("=","").strip()
        orig_no_operand_1 = orig_1.replace(">","").replace("<","").replace("=","").strip()
        orig_operand_0 = orig_0.split(" ")[0].strip()
        orig_operand_1 = orig_1.split(" ")[0].strip()
        orig_numeric_0 = version_to_number(orig_no_operand_0)
        orig_numeric_1 = version_to_number(orig_no_operand_1)

        # Check interval order
        if orig_numeric_0 > orig_numeric_1:
            #print("reversed!")

            temp = orig_0
            temp_no_operand = orig_no_operand_0
            temp_operand = orig_operand_0
            temp_numeric = orig_numeric_0

            orig_0 = orig_1
            orig_no_operand_0 = orig_no_operand_1
            orig_operand_0 = orig_operand_1
            orig_numeric_0 = orig_numeric_1

            orig_1 = temp
            orig_no_operand_1 = temp_no_operand
            orig_operand_1 = temp_operand
            orig_numeric_1 = temp_numeric

        # Check single compatibility
        for single in singles_list:
            single_numeric = version_to_number(single)
            if (orig_numeric_0 == single_numeric) and ("=" in orig_operand_0):
                #print("OK S:",single)
                out_singles.add(single)
            elif (orig_numeric_1 == single_numeric) and ("=" in orig_operand_1):
                #print("OK S:",single)
                out_singles.add(single)
            elif (orig_numeric_0 < single_numeric) and (single_numeric < orig_numeric_1):
                #print("OK S:",single)
                out_singles.add(single)
            
        # Check interval compatibility
        for interval in interval_list:
            interval_split = interval.split(";")
            int_0 = interval_split[0].strip()
            int_1 = interval_split[1].strip()
            int_no_operand_0 = int_0.replace(">","").replace("<","").replace("=","").strip()
            int_no_operand_1 = int_1.replace(">","").replace("<","").replace("=","").strip()
            int_operand_0 = int_0.split(" ")[0].strip()
            int_operand_1 = int_1.split(" ")[0].strip()
            int_numeric_0 = version_to_number(int_no_operand_0)
            int_numeric_1 = version_to_number(int_no_operand_1)

            #print("TST-:",interval)

            int_0_ok = False
            if (int_numeric_0 >= orig_numeric_0):
                if (orig_operand_0==">" and int_operand_0==">"): int_0_ok = True
                elif (orig_operand_0==">=" and int_operand_0==">"): int_0_ok = True
                elif (orig_operand_0==">=" and int_operand_0==">="): int_0_ok = True
            
            int_1_ok = False
            if (int_numeric_1 <= orig_numeric_1):
                if (orig_operand_1=="<" and int_operand_1=="<"): int_1_ok = True
                elif (orig_operand_1=="<=" and int_operand_1=="<"): int_1_ok = True
                elif (orig_operand_1=="<=" and int_operand_1=="<="): int_1_ok = True

            if int_0_ok==True and int_1_ok==True:
                #print("OK I:",interval)
                out_interval.add(interval)

        return out_singles,out_interval



    # I need to rebuild the DNF tree
    # out_device_to_cve_to_cpe_dnf_tree
    # Start from
    # - current_cve_to_dnf_tree
    # - segmented_device_to_vendor_to_product_to_version_interval
    # - temp_device_to_vendor_to_product_to_version_single
    # Use
    # segment_interval(original_interval,singles_list,interval_list)



    old_to_new_cpe_singles = dict()
    old_to_new_cpe_intervals = dict()
    out_device_to_cve_to_cpe_dnf_tree = dict()
    for device in out_device_to_target_cve_set:
        out_device_to_cve_to_cpe_dnf_tree[device] = dict()
        for cve in out_device_to_target_cve_set[device]:
            out_device_to_cve_to_cpe_dnf_tree[device][cve] = list()
            if cve in current_cve_to_dnf_tree:
                # The idea is to build a new DNF tree
                # OR - AND tree
                temp_dnf_tree = set()
                for and_list in current_cve_to_dnf_tree[cve]:
                    for cpe in and_list:
                        if cpe not in old_to_new_cpe_singles:
                            old_to_new_cpe_singles[cpe] = set()
                            old_to_new_cpe_intervals[cpe] = set()

                        temp_cpe_singles = set()
                        temp_cpe_intervals = set()

                        # Take the CPE apart
                        oldcpe = cpe
                        part = cpe[:cpe.find(":")]
                        cpe = cpe[cpe.find(":")+1:]
                        vendor = cpe[:cpe.find(":")]
                        cpe = cpe[cpe.find(":")+1:]
                        product = cpe[:cpe.find(":")]
                        cpe = cpe[cpe.find(":")+1:]
                        version = cpe
                        
                        # Take the version apart
                        if ";" in version:
                            # Ensured interval
                            temp_cpe_singles,temp_cpe_intervals = segment_interval(version,temp_device_to_vendor_to_product_to_version_single[device][vendor][product],segmented_device_to_vendor_to_product_to_version_interval[device][vendor][product])


                        elif ("<" in version) or ("<=" in version):
                            # Handle 0 - val
                            # This means building an interval
                            version_no_operand = version.replace("<","").replace("=","").strip()
                            version_operand = version.replace(version_no_operand,"").strip()

                            biginterval = ">= 0; "+version_operand+" "+version_no_operand

                            temp_cpe_singles,temp_cpe_intervals = segment_interval(biginterval,temp_device_to_vendor_to_product_to_version_single[device][vendor][product],segmented_device_to_vendor_to_product_to_version_interval[device][vendor][product])
                            

                        elif (">" in version) or (">=" in version):
                            # Handle val - inf
                            # This means building an interval
                            version_no_operand = version.replace(">","").replace("=","").strip()
                            version_operand = version.replace(version_no_operand,"").strip()

                            biginterval = version_operand+" "+version_no_operand+"; <= 99.99.99.99"

                            temp_cpe_singles,temp_cpe_intervals = segment_interval(biginterval,temp_device_to_vendor_to_product_to_version_single[device][vendor][product],segmented_device_to_vendor_to_product_to_version_interval[device][vendor][product])
                            
                        else:
                            # Everything else
                            # Should be single values, which means passthrough
                            old_to_new_cpe_singles[oldcpe].add(oldcpe)


                        # assemble old_to_new_cpe_singles
                        for elem in temp_cpe_singles:
                            old_to_new_cpe_singles[oldcpe].add(part+":"+vendor+":"+product+":"+elem)
                        
                        # assemble old_to_new_cpe_intervals
                        for elem in temp_cpe_intervals:
                            old_to_new_cpe_intervals[oldcpe].add(part+":"+vendor+":"+product+":"+elem)



                    # Reassemble whole CPEs
                    old_to_new_cpe = dict()
                    
                    for oldcpe in old_to_new_cpe_singles:
                        if oldcpe not in old_to_new_cpe:
                            old_to_new_cpe[oldcpe] = set()
                        for new_cpe in old_to_new_cpe_singles[oldcpe]:
                            old_to_new_cpe[oldcpe].add(new_cpe)
                    
                    for oldcpe in old_to_new_cpe_intervals:
                        if oldcpe not in old_to_new_cpe:
                            old_to_new_cpe[oldcpe] = set()
                        for new_cpe in old_to_new_cpe_intervals[oldcpe]:
                            old_to_new_cpe[oldcpe].add(new_cpe)


                    # Reassemble the AND or build OR of ANDs
                    if len(and_list) == 1:
                        # Simple case, just reassemble the AND
                        for cpe in old_to_new_cpe[and_list[0]]:
                            simple_list = list()
                            simple_list.append(cpe)
                            temp_dnf_tree.add(frozenset(simple_list))
                    elif len(and_list) > 1:
                        # Need to put in OR
                        # Combine each and every CPE
                        # (A OR B) AND C == (A AND C) OR (B AND C)
                        for old_cpe_1 in and_list:
                            for old_cpe_2 in and_list:
                                if old_cpe_1 != old_cpe_2:
                                    for new_cpe_1 in old_to_new_cpe[old_cpe_1]:
                                        for new_cpe_2 in old_to_new_cpe[old_cpe_2]:
                                            if new_cpe_1 != new_cpe_2:
                                                simple_list = list()
                                                simple_list.append(new_cpe_1)
                                                simple_list.append(new_cpe_2)
                                                temp_dnf_tree.add(frozenset(simple_list))


                for elem in temp_dnf_tree:
                    elem = list(elem)
                    out_device_to_cve_to_cpe_dnf_tree[device][cve].append(elem)

                    
                """
                print(cve)
                print("-",current_cve_to_dnf_tree[cve])
                print("+",out_device_to_cve_to_cpe_dnf_tree[device][cve])
                #"""



    # I have the DNF tree
    # out_device_to_cve_to_cpe_dnf_tree
    # I can build
    # device_to_cve_to_cpe_part_vendor_product_version
    


    # Start with out_device_to_cve_to_cpe_dnf_tree
    device_to_cve_to_cpe_part_vendor_product_version = dict()
    for device in out_device_to_cve_to_cpe_dnf_tree:
        device_to_cve_to_cpe_part_vendor_product_version[device] = dict()
        for cve in out_device_to_cve_to_cpe_dnf_tree[device]:
            device_to_cve_to_cpe_part_vendor_product_version[device][cve] = set()
            for and_cpe in out_device_to_cve_to_cpe_dnf_tree[device][cve]:
                for cpe in and_cpe:
                    device_to_cve_to_cpe_part_vendor_product_version[device][cve].add(cpe)



    # Build out_device_to_cpe_to_advisory
    out_device_to_cpe_to_advisory = dict()
    for device in current_host_to_advisory_to_cve:
        out_device_to_cpe_to_advisory[device] = dict()
        for advisory in current_host_to_advisory_to_cve[device]:
            for cve in current_host_to_advisory_to_cve[device][advisory]:
                if cve in out_device_to_cve_to_cpe_dnf_tree[device]:
                    for and_cpe in out_device_to_cve_to_cpe_dnf_tree[device][cve]:
                        for cpe in and_cpe:
                            if cpe not in out_device_to_cpe_to_advisory[device]:
                                out_device_to_cpe_to_advisory[device][cpe] = set()
                            out_device_to_cpe_to_advisory[device][cpe].add(advisory)

    for device in out_device_to_cpe_to_advisory:
        for cpe in out_device_to_cpe_to_advisory[device]:
            out_device_to_cpe_to_advisory[device][cpe] = list(out_device_to_cpe_to_advisory[device][cpe])


    # Build out_device_to_cpe_inventory
    out_device_to_cpe_inventory = dict()
    for device in device_to_cve_to_cpe_part_vendor_product_version:
        out_device_to_cpe_inventory[device] = dict()
        for cve in device_to_cve_to_cpe_part_vendor_product_version[device]:
            for cpe in device_to_cve_to_cpe_part_vendor_product_version[device][cve]:
                out_device_to_cpe_inventory[device][cpe] = "unknown"


    # Build out_device_to_cpe_inventory_inert
    out_device_to_cpe_inventory_inert = dict()
    for device in device_to_cve_to_cpe_part_vendor_product_version:
        out_device_to_cpe_inventory_inert[device] = dict()
        for cve in device_to_cve_to_cpe_part_vendor_product_version[device]:
            for cpe in device_to_cve_to_cpe_part_vendor_product_version[device][cve]:
                product = cpe.split(":")[2]
                if (device in current_host_to_inventory_products) and (product in current_host_to_inventory_products[device]):
                    # We have product
                    # Compare versions
                    version = cpe.split(":")[3]
                    for version_current in current_host_to_inventory_products[device][product]:
                        # Check if version is bounded by two operators
                        if ";" in version:
                            # Double operator, perform check twice
                            partial_version = version.split(";")
                            if version_compare(version_current,partial_version[0].strip()) and version_compare(version_current,partial_version[1].strip()):
                                out_device_to_cpe_inventory_inert[device][cpe] = "confirmed"
                            else:
                                out_device_to_cpe_inventory_inert[device][cpe] = "discarded"
                        else:
                            # Single operator
                            if version_compare(version_current,version) == True:
                                out_device_to_cpe_inventory_inert[device][cpe] = "confirmed"
                            else:
                                out_device_to_cpe_inventory_inert[device][cpe] = "discarded"
                else:
                    out_device_to_cpe_inventory_inert[device][cpe] = "discarded"

    return out_device_to_target_cve_set,out_device_to_advisory_to_cve,out_device_to_cve_to_cpe_dnf_tree,out_device_to_cpe_to_advisory,out_device_to_cpe_inventory,out_device_to_cpe_inventory_inert




host_to_pluginornvt_to_cve = dict()
for host in host_to_plugin_to_cve:
    if host not in host_to_pluginornvt_to_cve:
        host_to_pluginornvt_to_cve[host] = dict()
    for advisory in host_to_plugin_to_cve[host]:
        if advisory not in host_to_pluginornvt_to_cve[host]:
            host_to_pluginornvt_to_cve[host][advisory] = set()
        for cve in host_to_plugin_to_cve[host][advisory]:
            host_to_pluginornvt_to_cve[host][advisory].add(cve)

for host in host_to_nvt_to_cve:
    if host not in host_to_pluginornvt_to_cve:
        host_to_pluginornvt_to_cve[host] = dict()
    for advisory in host_to_nvt_to_cve[host]:
        if advisory not in host_to_pluginornvt_to_cve[host]:
            host_to_pluginornvt_to_cve[host][advisory] = set()
        for cve in host_to_nvt_to_cve[host][advisory]:
            host_to_pluginornvt_to_cve[host][advisory].add(cve)


# Version output
out_device_to_target_cve_set_version_merged,out_device_to_advisory_to_cve_version_merged,out_device_to_cve_to_cpe_version_merged,out_device_to_cpe_to_advisory_version_merged,out_device_to_cpe_inventory_version_merged,out_device_to_cpe_inventory_inert_version_merged = dict(),dict(),dict(),dict(),dict(),dict()
out_device_to_target_cve_set_version_nessus,out_device_to_advisory_to_cve_version_nessus,out_device_to_cve_to_cpe_version_nessus,out_device_to_cpe_to_advisory_version_nessus,out_device_to_cpe_inventory_version_nessus,out_device_to_cpe_inventory_inert_version_nessus = dict(),dict(),dict(),dict(),dict(),dict()
out_device_to_target_cve_set_version_openvas,out_device_to_advisory_to_cve_version_openvas,out_device_to_cve_to_cpe_version_openvas,out_device_to_cpe_to_advisory_version_openvas,out_device_to_cpe_inventory_version_openvas,out_device_to_cpe_inventory_inert_version_openvas = dict(),dict(),dict(),dict(),dict(),dict()
if VERSION == True:
    print("Version output")
    out_device_to_target_cve_set_version_merged,out_device_to_advisory_to_cve_version_merged,out_device_to_cve_to_cpe_version_merged,out_device_to_cpe_to_advisory_version_merged,out_device_to_cpe_inventory_version_merged,out_device_to_cpe_inventory_inert_version_merged = format_output(host_to_pluginornvt_to_cve,device_to_inventory_products_versions,cve_to_dnf_tree,cve_to_cpe_part_vendor_product_version,True)
    out_device_to_target_cve_set_version_nessus,out_device_to_advisory_to_cve_version_nessus,out_device_to_cve_to_cpe_version_nessus,out_device_to_cpe_to_advisory_version_nessus,out_device_to_cpe_inventory_version_nessus,out_device_to_cpe_inventory_inert_version_nessus = format_output(host_to_plugin_to_cve,device_to_inventory_products_versions,cve_to_dnf_tree,cve_to_cpe_part_vendor_product_version,True)
    out_device_to_target_cve_set_version_openvas,out_device_to_advisory_to_cve_version_openvas,out_device_to_cve_to_cpe_version_openvas,out_device_to_cpe_to_advisory_version_openvas,out_device_to_cpe_inventory_version_openvas,out_device_to_cpe_inventory_inert_version_openvas = format_output(host_to_nvt_to_cve,device_to_inventory_products_versions,cve_to_dnf_tree,cve_to_cpe_part_vendor_product_version,True)


# Version split output
out_device_to_target_cve_set_splitversion_merged,out_device_to_advisory_to_cve_splitversion_merged,out_device_to_cve_to_cpe_splitversion_merged,out_device_to_cpe_to_advisory_splitversion_merged,out_device_to_cpe_inventory_splitversion_merged,out_device_to_cpe_inventory_inert_splitversion_merged = dict(),dict(),dict(),dict(),dict(),dict()
out_device_to_target_cve_set_splitversion_nessus,out_device_to_advisory_to_cve_splitversion_nessus,out_device_to_cve_to_cpe_splitversion_nessus,out_device_to_cpe_to_advisory_splitversion_nessus,out_device_to_cpe_inventory_splitversion_nessus,out_device_to_cpe_inventory_inert_splitversion_nessus = dict(),dict(),dict(),dict(),dict(),dict()
out_device_to_target_cve_set_splitsplitversion_openvas,out_device_to_advisory_to_cve_splitversion_openvas,out_device_to_cve_to_cpe_splitversion_openvas,out_device_to_cpe_to_advisory_splitversion_openvas,out_device_to_cpe_inventory_splitversion_openvas,out_device_to_cpe_inventory_inert_splitversion_openvas = dict(),dict(),dict(),dict(),dict(),dict()
if SPLIT_VERSION == True:
    print("Version split output")
    out_device_to_target_cve_set_splitversion_merged,out_device_to_advisory_to_cve_splitversion_merged,out_device_to_cve_to_cpe_splitversion_merged,out_device_to_cpe_to_advisory_splitversion_merged,out_device_to_cpe_inventory_splitversion_merged,out_device_to_cpe_inventory_inert_splitversion_merged = format_output_segmented_version(host_to_pluginornvt_to_cve,device_to_inventory_products_versions,cve_to_dnf_tree,cve_to_cpe_part_vendor_product_version,device_to_vendor_to_product_to_version,False)
    out_device_to_target_cve_set_splitversion_nessus,out_device_to_advisory_to_cve_splitversion_nessus,out_device_to_cve_to_cpe_splitversion_nessus,out_device_to_cpe_to_advisory_splitversion_nessus,out_device_to_cpe_inventory_splitversion_nessus,out_device_to_cpe_inventory_inert_splitversion_nessus = format_output_segmented_version(host_to_plugin_to_cve,device_to_inventory_products_versions,cve_to_dnf_tree,cve_to_cpe_part_vendor_product_version,device_to_vendor_to_product_to_version,False)
    out_device_to_target_cve_set_splitsplitversion_openvas,out_device_to_advisory_to_cve_splitversion_openvas,out_device_to_cve_to_cpe_splitversion_openvas,out_device_to_cpe_to_advisory_splitversion_openvas,out_device_to_cpe_inventory_splitversion_openvas,out_device_to_cpe_inventory_inert_splitversion_openvas = format_output_segmented_version(host_to_nvt_to_cve,device_to_inventory_products_versions,cve_to_dnf_tree,cve_to_cpe_part_vendor_product_version,device_to_vendor_to_product_to_version,False)


# Version split output, with segment optimization
out_device_to_target_cve_set_splitversion_opt_merged,out_device_to_advisory_to_cve_splitversion_opt_merged,out_device_to_cve_to_cpe_splitversion_opt_merged,out_device_to_cpe_to_advisory_splitversion_opt_merged,out_device_to_cpe_inventory_splitversion_opt_merged,out_device_to_cpe_inventory_inert_splitversion_opt_merged = dict(),dict(),dict(),dict(),dict(),dict()
out_device_to_target_cve_set_splitversion_opt_nessus,out_device_to_advisory_to_cve_splitversion_opt_nessus,out_device_to_cve_to_cpe_splitversion_opt_nessus,out_device_to_cpe_to_advisory_splitversion_opt_nessus,out_device_to_cpe_inventory_splitversion_opt_nessus,out_device_to_cpe_inventory_inert_splitversion_opt_nessus = dict(),dict(),dict(),dict(),dict(),dict()
out_device_to_target_cve_set_splitsplitversion_opt_openvas,out_device_to_advisory_to_cve_splitversion_opt_openvas,out_device_to_cve_to_cpe_splitversion_opt_openvas,out_device_to_cpe_to_advisory_splitversion_opt_openvas,out_device_to_cpe_inventory_splitversion_opt_openvas,out_device_to_cpe_inventory_inert_splitversion_opt_openvas = dict(),dict(),dict(),dict(),dict(),dict()
if SPLIT_OPTIMIZATION == True:
    print("Version split output, with segment optimization")
    out_device_to_target_cve_set_splitversion_opt_merged,out_device_to_advisory_to_cve_splitversion_opt_merged,out_device_to_cve_to_cpe_splitversion_opt_merged,out_device_to_cpe_to_advisory_splitversion_opt_merged,out_device_to_cpe_inventory_splitversion_opt_merged,out_device_to_cpe_inventory_inert_splitversion_opt_merged = format_output_segmented_version(host_to_pluginornvt_to_cve,device_to_inventory_products_versions,cve_to_dnf_tree,cve_to_cpe_part_vendor_product_version,device_to_vendor_to_product_to_version,True)
    out_device_to_target_cve_set_splitversion_opt_nessus,out_device_to_advisory_to_cve_splitversion_opt_nessus,out_device_to_cve_to_cpe_splitversion_opt_nessus,out_device_to_cpe_to_advisory_splitversion_opt_nessus,out_device_to_cpe_inventory_splitversion_opt_nessus,out_device_to_cpe_inventory_inert_splitversion_opt_nessus = format_output_segmented_version(host_to_plugin_to_cve,device_to_inventory_products_versions,cve_to_dnf_tree,cve_to_cpe_part_vendor_product_version,device_to_vendor_to_product_to_version,True)
    out_device_to_target_cve_set_splitsplitversion_opt_openvas,out_device_to_advisory_to_cve_splitversion_opt_openvas,out_device_to_cve_to_cpe_splitversion_opt_openvas,out_device_to_cpe_to_advisory_splitversion_opt_openvas,out_device_to_cpe_inventory_splitversion_opt_openvas,out_device_to_cpe_inventory_inert_splitversion_opt_openvas = format_output_segmented_version(host_to_nvt_to_cve,device_to_inventory_products_versions,cve_to_dnf_tree,cve_to_cpe_part_vendor_product_version,device_to_vendor_to_product_to_version,True)


# No version output
out_device_to_target_cve_set_merged,out_device_to_advisory_to_cve_merged,out_device_to_cve_to_cpe_merged,out_device_to_cpe_to_advisory_merged,out_device_to_cpe_inventory_merged,out_device_to_cpe_inventory_inert_merged = dict(),dict(),dict(),dict(),dict(),dict()
out_device_to_target_cve_set_nessus,out_device_to_advisory_to_cve_nessus,out_device_to_cve_to_cpe_nessus,out_device_to_cpe_to_advisory_nessus,out_device_to_cpe_inventory_nessus,out_device_to_cpe_inventory_inert_nessus = dict(),dict(),dict(),dict(),dict(),dict()
out_device_to_target_cve_set_openvas,out_device_to_advisory_to_cve_openvas,out_device_to_cve_to_cpe_openvas,out_device_to_cpe_to_advisory_openvas,out_device_to_cpe_inventory_openvas,out_device_to_cpe_inventory_inert_openvas = dict(),dict(),dict(),dict(),dict(),dict()
if NO_VERSION == True:
    print("Non version output")
    out_device_to_target_cve_set_merged,out_device_to_advisory_to_cve_merged,out_device_to_cve_to_cpe_merged,out_device_to_cpe_to_advisory_merged,out_device_to_cpe_inventory_merged,out_device_to_cpe_inventory_inert_merged = format_output(host_to_pluginornvt_to_cve,device_to_inventory_products,cve_to_dnf_tree,cve_to_cpe_part_vendor_product,False)
    out_device_to_target_cve_set_nessus,out_device_to_advisory_to_cve_nessus,out_device_to_cve_to_cpe_nessus,out_device_to_cpe_to_advisory_nessus,out_device_to_cpe_inventory_nessus,out_device_to_cpe_inventory_inert_nessus = format_output(host_to_plugin_to_cve,device_to_inventory_products,cve_to_dnf_tree,cve_to_cpe_part_vendor_product,False)
    out_device_to_target_cve_set_openvas,out_device_to_advisory_to_cve_openvas,out_device_to_cve_to_cpe_openvas,out_device_to_cpe_to_advisory_openvas,out_device_to_cpe_inventory_openvas,out_device_to_cpe_inventory_inert_openvas = format_output(host_to_nvt_to_cve,device_to_inventory_products,cve_to_dnf_tree,cve_to_cpe_part_vendor_product,False)


device_set = set(out_device_to_target_cve_set_merged.keys()).union(set(out_device_to_target_cve_set_splitversion_opt_merged.keys())).union(set(out_device_to_target_cve_set_splitversion_merged.keys())).union(set(out_device_to_target_cve_set_version_merged.keys()))


#"""
print("Output snapshot meta")
os.mkdir(CYBERRANGE_OUTPUT_DIR+"/cyberrange_merged")
os.mkdir(CYBERRANGE_OUTPUT_DIR+"/cyberrange_nessus")
os.mkdir(CYBERRANGE_OUTPUT_DIR+"/cyberrange_openvas")


f = open(file=CYBERRANGE_OUTPUT_DIR+"/cyberrange_merged/snapshot_meta.json",mode="w",encoding="utf-8")
f.write(json.dumps({"hosts":list(out_device_to_target_cve_set_merged.keys())}))
f.close()

f = open(file=CYBERRANGE_OUTPUT_DIR+"/cyberrange_nessus/snapshot_meta.json",mode="w",encoding="utf-8")
f.write(json.dumps({"hosts":list(out_device_to_target_cve_set_nessus.keys())}))
f.close()

f = open(file=CYBERRANGE_OUTPUT_DIR+"/cyberrange_openvas/snapshot_meta.json",mode="w",encoding="utf-8")
f.write(json.dumps({"hosts":list(out_device_to_target_cve_set_openvas.keys())}))
f.close()


# Merged
print("Merged")
for device in device_set:
    print("Output device "+device)
    os.mkdir(CYBERRANGE_OUTPUT_DIR+"/cyberrange_merged/"+device)
    os.mkdir(CYBERRANGE_OUTPUT_DIR+"/cyberrange_merged/"+device+"/no_version")
    os.mkdir(CYBERRANGE_OUTPUT_DIR+"/cyberrange_merged/"+device+"/version")
    os.mkdir(CYBERRANGE_OUTPUT_DIR+"/cyberrange_merged/"+device+"/splitversion")
    os.mkdir(CYBERRANGE_OUTPUT_DIR+"/cyberrange_merged/"+device+"/splitversion_opt")

    if NO_VERSION == True:
        f = open(file=CYBERRANGE_OUTPUT_DIR+"/cyberrange_merged/"+device+"/no_version/advisory_to_cve.json",mode="w",encoding="utf-8")
        f.write(json.dumps(out_device_to_advisory_to_cve_merged[device]))
        f.close()

        f = open(file=CYBERRANGE_OUTPUT_DIR+"/cyberrange_merged/"+device+"/no_version/cve_to_cpe.json",mode="w",encoding="utf-8")
        f.write(json.dumps(out_device_to_cve_to_cpe_merged[device]))
        f.close()

        f = open(file=CYBERRANGE_OUTPUT_DIR+"/cyberrange_merged/"+device+"/no_version/cpe_to_advisory.json",mode="w",encoding="utf-8")
        f.write(json.dumps(out_device_to_cpe_to_advisory_merged[device]))
        f.close()

        f = open(file=CYBERRANGE_OUTPUT_DIR+"/cyberrange_merged/"+device+"/no_version/validation_inventory.json",mode="w",encoding="utf-8")
        f.write(json.dumps(out_device_to_cpe_inventory_merged[device]))
        f.close()

        f = open(file=CYBERRANGE_OUTPUT_DIR+"/cyberrange_merged/"+device+"/no_version/validation_inventory_inert.json",mode="w",encoding="utf-8")
        f.write(json.dumps(out_device_to_cpe_inventory_inert_merged[device]))
        f.close()

    if VERSION == True:
        f = open(file=CYBERRANGE_OUTPUT_DIR+"/cyberrange_merged/"+device+"/version/advisory_to_cve.json",mode="w",encoding="utf-8")
        f.write(json.dumps(out_device_to_advisory_to_cve_version_merged[device]))
        f.close()

        f = open(file=CYBERRANGE_OUTPUT_DIR+"/cyberrange_merged/"+device+"/version/cve_to_cpe.json",mode="w",encoding="utf-8")
        f.write(json.dumps(out_device_to_cve_to_cpe_version_merged[device]))
        f.close()

        f = open(file=CYBERRANGE_OUTPUT_DIR+"/cyberrange_merged/"+device+"/version/cpe_to_advisory.json",mode="w",encoding="utf-8")
        f.write(json.dumps(out_device_to_cpe_to_advisory_version_merged[device]))
        f.close()

        f = open(file=CYBERRANGE_OUTPUT_DIR+"/cyberrange_merged/"+device+"/version/validation_inventory.json",mode="w",encoding="utf-8")
        f.write(json.dumps(out_device_to_cpe_inventory_version_merged[device]))
        f.close()

        f = open(file=CYBERRANGE_OUTPUT_DIR+"/cyberrange_merged/"+device+"/version/validation_inventory_inert.json",mode="w",encoding="utf-8")
        f.write(json.dumps(out_device_to_cpe_inventory_inert_version_merged[device]))
        f.close()

    if SPLIT_VERSION == True:
        f = open(file=CYBERRANGE_OUTPUT_DIR+"/cyberrange_merged/"+device+"/splitversion/advisory_to_cve.json",mode="w",encoding="utf-8")
        f.write(json.dumps(out_device_to_advisory_to_cve_splitversion_merged[device]))
        f.close()

        f = open(file=CYBERRANGE_OUTPUT_DIR+"/cyberrange_merged/"+device+"/splitversion/cve_to_cpe.json",mode="w",encoding="utf-8")
        f.write(json.dumps(out_device_to_cve_to_cpe_splitversion_merged[device]))
        f.close()

        f = open(file=CYBERRANGE_OUTPUT_DIR+"/cyberrange_merged/"+device+"/splitversion/cpe_to_advisory.json",mode="w",encoding="utf-8")
        f.write(json.dumps(out_device_to_cpe_to_advisory_splitversion_merged[device]))
        f.close()

        f = open(file=CYBERRANGE_OUTPUT_DIR+"/cyberrange_merged/"+device+"/splitversion/validation_inventory.json",mode="w",encoding="utf-8")
        f.write(json.dumps(out_device_to_cpe_inventory_splitversion_merged[device]))
        f.close()

        f = open(file=CYBERRANGE_OUTPUT_DIR+"/cyberrange_merged/"+device+"/splitversion/validation_inventory_inert.json",mode="w",encoding="utf-8")
        f.write(json.dumps(out_device_to_cpe_inventory_inert_splitversion_merged[device]))
        f.close()

    if SPLIT_OPTIMIZATION == True:
        f = open(file=CYBERRANGE_OUTPUT_DIR+"/cyberrange_merged/"+device+"/splitversion_opt/advisory_to_cve.json",mode="w",encoding="utf-8")
        f.write(json.dumps(out_device_to_advisory_to_cve_splitversion_opt_merged[device]))
        f.close()

        f = open(file=CYBERRANGE_OUTPUT_DIR+"/cyberrange_merged/"+device+"/splitversion_opt/cve_to_cpe.json",mode="w",encoding="utf-8")
        f.write(json.dumps(out_device_to_cve_to_cpe_splitversion_opt_merged[device]))
        f.close()

        f = open(file=CYBERRANGE_OUTPUT_DIR+"/cyberrange_merged/"+device+"/splitversion_opt/cpe_to_advisory.json",mode="w",encoding="utf-8")
        f.write(json.dumps(out_device_to_cpe_to_advisory_splitversion_opt_merged[device]))
        f.close()

        f = open(file=CYBERRANGE_OUTPUT_DIR+"/cyberrange_merged/"+device+"/splitversion_opt/validation_inventory.json",mode="w",encoding="utf-8")
        f.write(json.dumps(out_device_to_cpe_inventory_splitversion_opt_merged[device]))
        f.close()

        f = open(file=CYBERRANGE_OUTPUT_DIR+"/cyberrange_merged/"+device+"/splitversion_opt/validation_inventory_inert.json",mode="w",encoding="utf-8")
        f.write(json.dumps(out_device_to_cpe_inventory_inert_splitversion_opt_merged[device]))
        f.close()


# Nessus
print("Nessus")
for device in device_set:
    print("Output device "+device)
    os.mkdir(CYBERRANGE_OUTPUT_DIR+"/cyberrange_nessus/"+device)
    os.mkdir(CYBERRANGE_OUTPUT_DIR+"/cyberrange_nessus/"+device+"/no_version")
    os.mkdir(CYBERRANGE_OUTPUT_DIR+"/cyberrange_nessus/"+device+"/version")
    os.mkdir(CYBERRANGE_OUTPUT_DIR+"/cyberrange_nessus/"+device+"/splitversion")
    os.mkdir(CYBERRANGE_OUTPUT_DIR+"/cyberrange_nessus/"+device+"/splitversion_opt")

    if NO_VERSION == True:
        f = open(file=CYBERRANGE_OUTPUT_DIR+"/cyberrange_nessus/"+device+"/no_version/advisory_to_cve.json",mode="w",encoding="utf-8")
        f.write(json.dumps(out_device_to_advisory_to_cve_nessus[device]))
        f.close()

        f = open(file=CYBERRANGE_OUTPUT_DIR+"/cyberrange_nessus/"+device+"/no_version/cve_to_cpe.json",mode="w",encoding="utf-8")
        f.write(json.dumps(out_device_to_cve_to_cpe_nessus[device]))
        f.close()

        f = open(file=CYBERRANGE_OUTPUT_DIR+"/cyberrange_nessus/"+device+"/no_version/cpe_to_advisory.json",mode="w",encoding="utf-8")
        f.write(json.dumps(out_device_to_cpe_to_advisory_nessus[device]))
        f.close()

        f = open(file=CYBERRANGE_OUTPUT_DIR+"/cyberrange_nessus/"+device+"/no_version/validation_inventory.json",mode="w",encoding="utf-8")
        f.write(json.dumps(out_device_to_cpe_inventory_nessus[device]))
        f.close()

        f = open(file=CYBERRANGE_OUTPUT_DIR+"/cyberrange_nessus/"+device+"/no_version/validation_inventory_inert.json",mode="w",encoding="utf-8")
        f.write(json.dumps(out_device_to_cpe_inventory_inert_nessus[device]))
        f.close()

    if VERSION == True:
        f = open(file=CYBERRANGE_OUTPUT_DIR+"/cyberrange_nessus/"+device+"/version/advisory_to_cve.json",mode="w",encoding="utf-8")
        f.write(json.dumps(out_device_to_advisory_to_cve_version_nessus[device]))
        f.close()

        f = open(file=CYBERRANGE_OUTPUT_DIR+"/cyberrange_nessus/"+device+"/version/cve_to_cpe.json",mode="w",encoding="utf-8")
        f.write(json.dumps(out_device_to_cve_to_cpe_version_nessus[device]))
        f.close()

        f = open(file=CYBERRANGE_OUTPUT_DIR+"/cyberrange_nessus/"+device+"/version/cpe_to_advisory.json",mode="w",encoding="utf-8")
        f.write(json.dumps(out_device_to_cpe_to_advisory_version_nessus[device]))
        f.close()

        f = open(file=CYBERRANGE_OUTPUT_DIR+"/cyberrange_nessus/"+device+"/version/validation_inventory.json",mode="w",encoding="utf-8")
        f.write(json.dumps(out_device_to_cpe_inventory_version_nessus[device]))
        f.close()

        f = open(file=CYBERRANGE_OUTPUT_DIR+"/cyberrange_nessus/"+device+"/version/validation_inventory_inert.json",mode="w",encoding="utf-8")
        f.write(json.dumps(out_device_to_cpe_inventory_inert_version_nessus[device]))
        f.close()

    if SPLIT_VERSION == True:
        f = open(file=CYBERRANGE_OUTPUT_DIR+"/cyberrange_nessus/"+device+"/splitversion/advisory_to_cve.json",mode="w",encoding="utf-8")
        f.write(json.dumps(out_device_to_advisory_to_cve_splitversion_nessus[device]))
        f.close()

        f = open(file=CYBERRANGE_OUTPUT_DIR+"/cyberrange_nessus/"+device+"/splitversion/cve_to_cpe.json",mode="w",encoding="utf-8")
        f.write(json.dumps(out_device_to_cve_to_cpe_splitversion_nessus[device]))
        f.close()

        f = open(file=CYBERRANGE_OUTPUT_DIR+"/cyberrange_nessus/"+device+"/splitversion/cpe_to_advisory.json",mode="w",encoding="utf-8")
        f.write(json.dumps(out_device_to_cpe_to_advisory_splitversion_nessus[device]))
        f.close()

        f = open(file=CYBERRANGE_OUTPUT_DIR+"/cyberrange_nessus/"+device+"/splitversion/validation_inventory.json",mode="w",encoding="utf-8")
        f.write(json.dumps(out_device_to_cpe_inventory_splitversion_nessus[device]))
        f.close()

        f = open(file=CYBERRANGE_OUTPUT_DIR+"/cyberrange_nessus/"+device+"/splitversion/validation_inventory_inert.json",mode="w",encoding="utf-8")
        f.write(json.dumps(out_device_to_cpe_inventory_inert_splitversion_nessus[device]))

    if SPLIT_OPTIMIZATION == True:
        f = open(file=CYBERRANGE_OUTPUT_DIR+"/cyberrange_nessus/"+device+"/splitversion_opt/advisory_to_cve.json",mode="w",encoding="utf-8")
        f.write(json.dumps(out_device_to_advisory_to_cve_splitversion_opt_nessus[device]))
        f.close()

        f = open(file=CYBERRANGE_OUTPUT_DIR+"/cyberrange_nessus/"+device+"/splitversion_opt/cve_to_cpe.json",mode="w",encoding="utf-8")
        f.write(json.dumps(out_device_to_cve_to_cpe_splitversion_opt_nessus[device]))
        f.close()

        f = open(file=CYBERRANGE_OUTPUT_DIR+"/cyberrange_nessus/"+device+"/splitversion_opt/cpe_to_advisory.json",mode="w",encoding="utf-8")
        f.write(json.dumps(out_device_to_cpe_to_advisory_splitversion_opt_nessus[device]))
        f.close()

        f = open(file=CYBERRANGE_OUTPUT_DIR+"/cyberrange_nessus/"+device+"/splitversion_opt/validation_inventory.json",mode="w",encoding="utf-8")
        f.write(json.dumps(out_device_to_cpe_inventory_splitversion_opt_nessus[device]))
        f.close()

        f = open(file=CYBERRANGE_OUTPUT_DIR+"/cyberrange_nessus/"+device+"/splitversion_opt/validation_inventory_inert.json",mode="w",encoding="utf-8")
        f.write(json.dumps(out_device_to_cpe_inventory_inert_splitversion_opt_nessus[device]))
        f.close()


# Openvas
print("Openvas")
for device in device_set:
    print("Output device "+device)
    os.mkdir(CYBERRANGE_OUTPUT_DIR+"/cyberrange_openvas/"+device)
    os.mkdir(CYBERRANGE_OUTPUT_DIR+"/cyberrange_openvas/"+device+"/version")
    os.mkdir(CYBERRANGE_OUTPUT_DIR+"/cyberrange_openvas/"+device+"/no_version")
    os.mkdir(CYBERRANGE_OUTPUT_DIR+"/cyberrange_openvas/"+device+"/splitversion")
    os.mkdir(CYBERRANGE_OUTPUT_DIR+"/cyberrange_openvas/"+device+"/splitversion_opt")

    if NO_VERSION == True:
        f = open(file=CYBERRANGE_OUTPUT_DIR+"/cyberrange_openvas/"+device+"/no_version/advisory_to_cve.json",mode="w",encoding="utf-8")
        f.write(json.dumps(out_device_to_advisory_to_cve_openvas[device]))
        f.close()

        f = open(file=CYBERRANGE_OUTPUT_DIR+"/cyberrange_openvas/"+device+"/no_version/cve_to_cpe.json",mode="w",encoding="utf-8")
        f.write(json.dumps(out_device_to_cve_to_cpe_openvas[device]))
        f.close()

        f = open(file=CYBERRANGE_OUTPUT_DIR+"/cyberrange_openvas/"+device+"/no_version/cpe_to_advisory.json",mode="w",encoding="utf-8")
        f.write(json.dumps(out_device_to_cpe_to_advisory_openvas[device]))
        f.close()

        f = open(file=CYBERRANGE_OUTPUT_DIR+"/cyberrange_openvas/"+device+"/no_version/validation_inventory.json",mode="w",encoding="utf-8")
        f.write(json.dumps(out_device_to_cpe_inventory_openvas[device]))
        f.close()

        f = open(file=CYBERRANGE_OUTPUT_DIR+"/cyberrange_openvas/"+device+"/no_version/validation_inventory_inert.json",mode="w",encoding="utf-8")
        f.write(json.dumps(out_device_to_cpe_inventory_inert_openvas[device]))
        f.close()

    if VERSION == True:
        f = open(file=CYBERRANGE_OUTPUT_DIR+"/cyberrange_openvas/"+device+"/version/advisory_to_cve.json",mode="w",encoding="utf-8")
        f.write(json.dumps(out_device_to_advisory_to_cve_version_openvas[device]))
        f.close()

        f = open(file=CYBERRANGE_OUTPUT_DIR+"/cyberrange_openvas/"+device+"/version/cve_to_cpe.json",mode="w",encoding="utf-8")
        f.write(json.dumps(out_device_to_cve_to_cpe_version_openvas[device]))
        f.close()

        f = open(file=CYBERRANGE_OUTPUT_DIR+"/cyberrange_openvas/"+device+"/version/cpe_to_advisory.json",mode="w",encoding="utf-8")
        f.write(json.dumps(out_device_to_cpe_to_advisory_version_openvas[device]))
        f.close()

        f = open(file=CYBERRANGE_OUTPUT_DIR+"/cyberrange_openvas/"+device+"/version/validation_inventory.json",mode="w",encoding="utf-8")
        f.write(json.dumps(out_device_to_cpe_inventory_version_openvas[device]))
        f.close()

        f = open(file=CYBERRANGE_OUTPUT_DIR+"/cyberrange_openvas/"+device+"/version/validation_inventory_inert.json",mode="w",encoding="utf-8")
        f.write(json.dumps(out_device_to_cpe_inventory_inert_version_openvas[device]))
        f.close()

    if SPLIT_VERSION == True:
        f = open(file=CYBERRANGE_OUTPUT_DIR+"/cyberrange_openvas/"+device+"/splitversion/advisory_to_cve.json",mode="w",encoding="utf-8")
        f.write(json.dumps(out_device_to_advisory_to_cve_splitversion_openvas[device]))
        f.close()

        f = open(file=CYBERRANGE_OUTPUT_DIR+"/cyberrange_openvas/"+device+"/splitversion/cve_to_cpe.json",mode="w",encoding="utf-8")
        f.write(json.dumps(out_device_to_cve_to_cpe_splitversion_openvas[device]))
        f.close()

        f = open(file=CYBERRANGE_OUTPUT_DIR+"/cyberrange_openvas/"+device+"/splitversion/cpe_to_advisory.json",mode="w",encoding="utf-8")
        f.write(json.dumps(out_device_to_cpe_to_advisory_splitversion_openvas[device]))
        f.close()

        f = open(file=CYBERRANGE_OUTPUT_DIR+"/cyberrange_openvas/"+device+"/splitversion/validation_inventory.json",mode="w",encoding="utf-8")
        f.write(json.dumps(out_device_to_cpe_inventory_splitversion_openvas[device]))
        f.close()

        f = open(file=CYBERRANGE_OUTPUT_DIR+"/cyberrange_openvas/"+device+"/splitversion/validation_inventory_inert.json",mode="w",encoding="utf-8")
        f.write(json.dumps(out_device_to_cpe_inventory_inert_splitversion_openvas[device]))
        f.close()

    if SPLIT_OPTIMIZATION == True:
        f = open(file=CYBERRANGE_OUTPUT_DIR+"/cyberrange_openvas/"+device+"/splitversion_opt/advisory_to_cve.json",mode="w",encoding="utf-8")
        f.write(json.dumps(out_device_to_advisory_to_cve_splitversion_opt_openvas[device]))
        f.close()

        f = open(file=CYBERRANGE_OUTPUT_DIR+"/cyberrange_openvas/"+device+"/splitversion_opt/cve_to_cpe.json",mode="w",encoding="utf-8")
        f.write(json.dumps(out_device_to_cve_to_cpe_splitversion_opt_openvas[device]))
        f.close()

        f = open(file=CYBERRANGE_OUTPUT_DIR+"/cyberrange_openvas/"+device+"/splitversion_opt/cpe_to_advisory.json",mode="w",encoding="utf-8")
        f.write(json.dumps(out_device_to_cpe_to_advisory_splitversion_opt_openvas[device]))
        f.close()

        f = open(file=CYBERRANGE_OUTPUT_DIR+"/cyberrange_openvas/"+device+"/splitversion_opt/validation_inventory.json",mode="w",encoding="utf-8")
        f.write(json.dumps(out_device_to_cpe_inventory_splitversion_opt_openvas[device]))
        f.close()

        f = open(file=CYBERRANGE_OUTPUT_DIR+"/cyberrange_openvas/"+device+"/splitversion_opt/validation_inventory_inert.json",mode="w",encoding="utf-8")
        f.write(json.dumps(out_device_to_cpe_inventory_inert_splitversion_opt_openvas[device]))
        f.close()
#"""