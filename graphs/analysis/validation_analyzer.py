import json
import math
import numpy
import statistics

import scipy.stats as st
import plotly.graph_objects as go

import os



MAIN_DIR = "CVE-Search-Validator/"
VALIDATION_DATA_DIR = MAIN_DIR+"/graphs/analysis/analyzed_sequence/"
OUTPUT_DIR = MAIN_DIR+"/graphs/analysis/output/"

NO_VERSION = False
SIMPLE_VERSION = True
EXTENDED_VERSION = True
SPLIT_VERSION = False
SPLIT_VERSION_OPTIMIZATION = False

PLOT_TO_BROWSER = False


HOST_ID_TO_LABEL_NAME = {
    "172.25.0.14":"H0",
    "172.25.0.13":"H1",
    "172.25.0.17":"H2",
    "172.25.0.18":"H3",
    "172.25.0.16":"H4",
    "172.25.0.15":"H5",
    "172.25.0.12":"H6",
    "172.25.0.11":"H7"
}

HOST_ID_TO_LABEL_NAME_REVERSED = {
    "H0":"172.25.0.14",
    "H1":"172.25.0.13",
    "H2":"172.25.0.17",
    "H3":"172.25.0.18",
    "H4":"172.25.0.16",
    "H5":"172.25.0.15",
    "H6":"172.25.0.12",
    "H7":"172.25.0.11"
}

STRATEGY_TO_CF = {
    "RN":"R",
    "SR":"R",
    "PP":"P",
    "VS":"V",
    "VP":"VP"
}

CF_TO_STRATEGY = {
    "R":"RN",
    "P":"PP",
    "V":"VS",
    "VP":"VP"
}

CF_LIST = ["R","P","V","VP"]



# Load files
print("Load files for no version")
host_to_rundata_noversion = dict()

if NO_VERSION==True:
    for filename in os.listdir(VALIDATION_DATA_DIR+"/noversion/"):
        if "run_data_for_" in filename:
            f = os.path.join(VALIDATION_DATA_DIR+"/noversion/", filename)
            # checking if it is a file
            if os.path.isfile(f):
                host_id = filename[filename.find("run_data_for_"):].replace("run_data_for_","").replace(".json","").replace("_",".")
                
                fp = open(file=f,mode="r",encoding="utf-8")
                host_to_rundata_noversion[host_id] = json.loads(fp.read())
                fp.close()



# Load files for simple version
print("Load files for simple version")
host_to_rundata_version = dict()

if SIMPLE_VERSION == True:
    for filename in os.listdir(VALIDATION_DATA_DIR+"/version/"):
        if "run_data_for_" in filename:
            f = os.path.join(VALIDATION_DATA_DIR+"/version/", filename)
            # checking if it is a file
            if os.path.isfile(f):
                host_id = filename[filename.find("run_data_for_"):].replace("run_data_for_","").replace(".json","").replace("_",".")
                
                fp = open(file=f,mode="r",encoding="utf-8")
                host_to_rundata_version[host_id] = json.loads(fp.read())
                fp.close()



# Load files for extended version
print("Load files for extended version")
host_to_rundata_extended_version = dict()

if EXTENDED_VERSION == True:
    for filename in os.listdir(VALIDATION_DATA_DIR+"/extended_version/"):
        if "run_data_for_" in filename:
            f = os.path.join(VALIDATION_DATA_DIR+"/extended_version/", filename)
            # checking if it is a file
            if os.path.isfile(f):
                host_id = filename[filename.find("run_data_for_"):].replace("run_data_for_","").replace(".json","").replace("_",".")
                
                fp = open(file=f,mode="r",encoding="utf-8")
                host_to_rundata_extended_version[host_id] = json.loads(fp.read())
                fp.close()



# Load files for split version
print("Load files for split version")
host_to_rundata_splitversion = dict()

if SPLIT_VERSION == True:
    for filename in os.listdir(VALIDATION_DATA_DIR+"/splitversion/"):
        if "run_data_for_" in filename:
            f = os.path.join(VALIDATION_DATA_DIR+"/splitversion/", filename)
            # checking if it is a file
            if os.path.isfile(f):
                host_id = filename[filename.find("run_data_for_"):].replace("run_data_for_","").replace(".json","").replace("_",".")
                
                fp = open(file=f,mode="r",encoding="utf-8")
                host_to_rundata_splitversion[host_id] = json.loads(fp.read())
                fp.close()



# Load files for optimized split version
print("Load files for optimized split version")
host_to_rundata_splitversion_opt = dict()

if SPLIT_VERSION_OPTIMIZATION == True:
    for filename in os.listdir(VALIDATION_DATA_DIR+"/splitversion_opt/"):
        if "run_data_for_" in filename:
            f = os.path.join(VALIDATION_DATA_DIR+"/splitversion_opt/", filename)
            # checking if it is a file
            if os.path.isfile(f):
                host_id = filename[filename.find("run_data_for_"):].replace("run_data_for_","").replace(".json","").replace("_",".")
                
                fp = open(file=f,mode="r",encoding="utf-8")
                host_to_rundata_splitversion_opt[host_id] = json.loads(fp.read())
                fp.close()




# Divide into runs
def divide_into_runs(local_host_to_rundata):
    out_host_to_strategy_to_step = dict()
    for host_id in local_host_to_rundata:
        out_host_to_strategy_to_step[host_id] = dict()
        for entry in local_host_to_rundata[host_id]["values"]:
            strategy = entry["strategy"]
            run_number = entry["strategy"].replace(strategy+"_","")
            step = entry["step"]

            if strategy not in out_host_to_strategy_to_step[host_id]:
                out_host_to_strategy_to_step[host_id][strategy] = dict()
            
            if step not in out_host_to_strategy_to_step[host_id][strategy]:
                out_host_to_strategy_to_step[host_id][strategy][step] = list()
            
            out_host_to_strategy_to_step[host_id][strategy][step].append(entry["remaining_cves"])


    # Cut unnecessary zeroes
    new_host_to_strategy_to_step = dict()
    for host_id in out_host_to_strategy_to_step:
        new_host_to_strategy_to_step[host_id] = dict()
        for strategy_id in out_host_to_strategy_to_step[host_id]:
            first_zero = True
            new_host_to_strategy_to_step[host_id][strategy_id] = dict()
            for step in out_host_to_strategy_to_step[host_id][strategy_id]:
                if (sum(out_host_to_strategy_to_step[host_id][strategy_id][step]) == 0):
                    if (first_zero == True):
                        first_zero = False
                        new_host_to_strategy_to_step[host_id][strategy_id][step] = out_host_to_strategy_to_step[host_id][strategy_id][step]
                else:
                    new_host_to_strategy_to_step[host_id][strategy_id][step] = out_host_to_strategy_to_step[host_id][strategy_id][step]
    out_host_to_strategy_to_step = new_host_to_strategy_to_step

    return out_host_to_strategy_to_step



# Divide into runs, noversion
print("Divide into runs, noversion")
host_to_strategy_to_step_noversion = dict()
if NO_VERSION==True:
    host_to_strategy_to_step_noversion = divide_into_runs(host_to_rundata_noversion)

# Divide into runs, version
print("Divide into runs, version")
host_to_strategy_to_step_version = dict()
if SIMPLE_VERSION==True:
    host_to_strategy_to_step_version = divide_into_runs(host_to_rundata_version)

# Divide into runs, extended version
print("Divide into runs, extended version")
host_to_strategy_to_step_extended_version = dict()
if EXTENDED_VERSION==True:
    host_to_strategy_to_step_extended_version = divide_into_runs(host_to_rundata_extended_version)

# Divide into runs, splitversion
host_to_strategy_to_step_splitversion = dict()
if SPLIT_VERSION == True:
    print("Divide into runs, splitversion")
    host_to_strategy_to_step_splitversion = divide_into_runs(host_to_rundata_splitversion)

# Divide into runs, splitversion_opt
host_to_strategy_to_step_splitversion_opt = dict()
if SPLIT_VERSION_OPTIMIZATION == True:
    print("Divide into runs, splitversion_opt")
    host_to_strategy_to_step_splitversion_opt = divide_into_runs(host_to_rundata_splitversion_opt)


# Build graph data
print("Build graph data")
def build_graph_data(host_to_strategy_to_step):
    host_to_strategy_to_graph_x = dict()
    host_to_strategy_to_graph_y_mean = dict()
    host_to_strategy_to_graph_y_upper = dict()
    host_to_strategy_to_graph_y_lower = dict()
    host_to_strategy_to_graph_y_median = dict()
    host_to_strategy_to_graph_y_variance = dict()
    host_to_strategy_to_graph_color = dict()
    host_to_strategy_to_graph_color_maxmin = dict()
    host_to_strategy_to_graph_color_variance = dict()
    host_to_strategy_to_graph_y_percentile_25 = dict()
    host_to_strategy_to_graph_y_percentile_75 = dict()
    host_to_strategy_to_graph_y_confidence_interval_upper = dict()
    host_to_strategy_to_graph_y_confidence_interval_lower = dict()

    for host_id in host_to_strategy_to_step:
        host_to_strategy_to_graph_x[host_id] = dict()
        host_to_strategy_to_graph_y_mean[host_id] = dict()
        host_to_strategy_to_graph_y_upper[host_id] = dict()
        host_to_strategy_to_graph_y_lower[host_id] = dict()
        host_to_strategy_to_graph_y_median[host_id] = dict()
        host_to_strategy_to_graph_y_variance[host_id] = dict()
        host_to_strategy_to_graph_color[host_id] = dict()
        host_to_strategy_to_graph_color_maxmin[host_id] = dict()
        host_to_strategy_to_graph_color_variance[host_id] = dict()
        host_to_strategy_to_graph_y_percentile_25[host_id] = dict()
        host_to_strategy_to_graph_y_percentile_75[host_id] = dict()
        host_to_strategy_to_graph_y_confidence_interval_upper[host_id] = dict()
        host_to_strategy_to_graph_y_confidence_interval_lower[host_id] = dict()
        
        for strategy_id in host_to_strategy_to_step[host_id]:
            host_to_strategy_to_graph_x[host_id][strategy_id] = list()
            host_to_strategy_to_graph_y_mean[host_id][strategy_id] = list()
            host_to_strategy_to_graph_y_upper[host_id][strategy_id] = list()
            host_to_strategy_to_graph_y_lower[host_id][strategy_id] = list()
            host_to_strategy_to_graph_y_median[host_id][strategy_id] = list()
            host_to_strategy_to_graph_y_variance[host_id][strategy_id] = list()
            host_to_strategy_to_graph_y_percentile_25[host_id][strategy_id] = list()
            host_to_strategy_to_graph_y_percentile_75[host_id][strategy_id] = list()
            host_to_strategy_to_graph_y_confidence_interval_upper[host_id][strategy_id] = list()
            host_to_strategy_to_graph_y_confidence_interval_lower[host_id][strategy_id] = list()
            
            if strategy_id == "RN":
                host_to_strategy_to_graph_color[host_id][strategy_id] = "rgb(150,0,0)"
                host_to_strategy_to_graph_color_maxmin[host_id][strategy_id] = "rgba(150,0,0,0.1)"
                host_to_strategy_to_graph_color_variance[host_id][strategy_id] = "rgba(150,0,0,0.2)"
            elif strategy_id == "SR":
                host_to_strategy_to_graph_color[host_id][strategy_id] = "rgb(150,150,0)"
                host_to_strategy_to_graph_color_maxmin[host_id][strategy_id] = "rgba(150,150,0,0.1)"
                host_to_strategy_to_graph_color_variance[host_id][strategy_id] = "rgba(150,150,0,0.2)"
            elif strategy_id == "PP":
                host_to_strategy_to_graph_color[host_id][strategy_id] = "rgb(0,150,0)"
                host_to_strategy_to_graph_color_maxmin[host_id][strategy_id] = "rgba(0,150,0,0.1)"
                host_to_strategy_to_graph_color_variance[host_id][strategy_id] = "rgba(0,150,0,0.2)"
            elif strategy_id == "VS":
                host_to_strategy_to_graph_color[host_id][strategy_id] = "rgb(0,150,150)"
                host_to_strategy_to_graph_color_maxmin[host_id][strategy_id] = "rgba(0,150,150,0.1)"
                host_to_strategy_to_graph_color_variance[host_id][strategy_id] = "rgba(0,150,150,0.2)"
            else:
                host_to_strategy_to_graph_color[host_id][strategy_id] = "rgb(0,0,150)"
                host_to_strategy_to_graph_color_maxmin[host_id][strategy_id] = "rgba(0,0,150,0.1)"
                host_to_strategy_to_graph_color_variance[host_id][strategy_id] = "rgba(0,0,150,0.2)"
            
            for step_id in host_to_strategy_to_step[host_id][strategy_id]:
                value_mean = 0
                value_max = 0
                value_min = 0
                value_median = 0
                value_variance = 0
                value_percentile_25 = 0
                value_percentile_75 = 0
                value_confidence_interval_upper = 0
                value_confidence_interval_lower = 0

                first_run = True
                for value in host_to_strategy_to_step[host_id][strategy_id][step_id]:
                    if first_run == True:
                        first_run = False
                        value_max = value
                        value_min = value
                
                    value_max = max(value,value_max)
                    value_min = min(value,value_min)

                value_median = statistics.median(host_to_strategy_to_step[host_id][strategy_id][step_id])
                value_mean = statistics.mean(host_to_strategy_to_step[host_id][strategy_id][step_id])
                value_variance = statistics.variance(host_to_strategy_to_step[host_id][strategy_id][step_id])

                value_percentile_25 = numpy.percentile(numpy.array(host_to_strategy_to_step[host_id][strategy_id][step_id]),25)
                value_percentile_75 = numpy.percentile(numpy.array(host_to_strategy_to_step[host_id][strategy_id][step_id]),75)

                # alpha is the CI %
                value_confidence_interval_lower, value_confidence_interval_upper = st.t.interval(alpha = 0.90, df = len(host_to_strategy_to_step[host_id][strategy_id][step_id])-1, loc = value_mean, scale = st.sem(host_to_strategy_to_step[host_id][strategy_id][step_id]))

                if numpy.isnan(value_confidence_interval_upper): value_confidence_interval_upper = value_mean
                if numpy.isnan(value_confidence_interval_lower): value_confidence_interval_lower = value_mean

                step_id = int(step_id)

                host_to_strategy_to_graph_x[host_id][strategy_id].append(step_id)
                host_to_strategy_to_graph_y_mean[host_id][strategy_id].append(value_mean)
                host_to_strategy_to_graph_y_upper[host_id][strategy_id].append(value_max)
                host_to_strategy_to_graph_y_lower[host_id][strategy_id].append(value_min)
                host_to_strategy_to_graph_y_variance[host_id][strategy_id].append(value_variance)
                host_to_strategy_to_graph_y_median[host_id][strategy_id].append(value_median)
                host_to_strategy_to_graph_y_percentile_25[host_id][strategy_id].append(value_percentile_25)
                host_to_strategy_to_graph_y_percentile_75[host_id][strategy_id].append(value_percentile_75)
                host_to_strategy_to_graph_y_confidence_interval_upper[host_id][strategy_id].append(value_confidence_interval_upper)
                host_to_strategy_to_graph_y_confidence_interval_lower[host_id][strategy_id].append(value_confidence_interval_lower)

    return host_to_strategy_to_graph_x, host_to_strategy_to_graph_y_mean, host_to_strategy_to_graph_y_upper, host_to_strategy_to_graph_y_lower, host_to_strategy_to_graph_y_median, host_to_strategy_to_graph_y_variance, host_to_strategy_to_graph_color, host_to_strategy_to_graph_color_maxmin, host_to_strategy_to_graph_color_variance, host_to_strategy_to_graph_y_percentile_25, host_to_strategy_to_graph_y_percentile_75, host_to_strategy_to_graph_y_confidence_interval_upper, host_to_strategy_to_graph_y_confidence_interval_lower



if NO_VERSION == True:
    host_to_strategy_to_graph_x_noversion, host_to_strategy_to_graph_y_mean_noversion, host_to_strategy_to_graph_y_upper_noversion, host_to_strategy_to_graph_y_lower_noversion, host_to_strategy_to_graph_y_median_noversion, host_to_strategy_to_graph_y_variance_noversion, host_to_strategy_to_graph_color_noversion, host_to_strategy_to_graph_color_maxmin_noversion, host_to_strategy_to_graph_color_variance_noversion, host_to_strategy_to_graph_y_percentile_25_noversion, host_to_strategy_to_graph_y_percentile_75_noversion, host_to_strategy_to_graph_y_confidence_interval_upper_noversion, host_to_strategy_to_graph_y_confidence_interval_lower_noversion = build_graph_data(host_to_strategy_to_step_noversion)

if SIMPLE_VERSION == True:
    host_to_strategy_to_graph_x_version, host_to_strategy_to_graph_y_mean_version, host_to_strategy_to_graph_y_upper_version, host_to_strategy_to_graph_y_lower_version, host_to_strategy_to_graph_y_median_version, host_to_strategy_to_graph_y_variance_version, host_to_strategy_to_graph_color_version, host_to_strategy_to_graph_color_maxmin_version, host_to_strategy_to_graph_color_variance_version, host_to_strategy_to_graph_y_percentile_25_version, host_to_strategy_to_graph_y_percentile_75_version, host_to_strategy_to_graph_y_confidence_interval_upper_version, host_to_strategy_to_graph_y_confidence_interval_lower_version = build_graph_data(host_to_strategy_to_step_version)

if EXTENDED_VERSION == True:
    host_to_strategy_to_graph_x_extended_version, host_to_strategy_to_graph_y_mean_extended_version, host_to_strategy_to_graph_y_upper_extended_version, host_to_strategy_to_graph_y_lower_extended_version, host_to_strategy_to_graph_y_median_extended_version, host_to_strategy_to_graph_y_variance_extended_version, host_to_strategy_to_graph_color_extended_version, host_to_strategy_to_graph_color_maxmin_extended_version, host_to_strategy_to_graph_color_variance_extended_version, host_to_strategy_to_graph_y_percentile_25_extended_version, host_to_strategy_to_graph_y_percentile_75_extended_version, host_to_strategy_to_graph_y_confidence_interval_upper_extended_version, host_to_strategy_to_graph_y_confidence_interval_lower_extended_version = build_graph_data(host_to_strategy_to_step_extended_version)

if SPLIT_VERSION == True:
    host_to_strategy_to_graph_x_splitversion, host_to_strategy_to_graph_y_mean_splitversion, host_to_strategy_to_graph_y_upper_splitversion, host_to_strategy_to_graph_y_lower_splitversion, host_to_strategy_to_graph_y_median_splitversion, host_to_strategy_to_graph_y_variance_splitversion, host_to_strategy_to_graph_color_splitversion, host_to_strategy_to_graph_color_maxmin_splitversion, host_to_strategy_to_graph_color_variance_splitversion, host_to_strategy_to_graph_y_percentile_25_splitversion, host_to_strategy_to_graph_y_percentile_75_splitversion, host_to_strategy_to_graph_y_confidence_interval_upper_splitversion, host_to_strategy_to_graph_y_confidence_interval_lower_splitversion = build_graph_data(host_to_strategy_to_step_splitversion)

if SPLIT_VERSION_OPTIMIZATION == True:
    host_to_strategy_to_graph_x_splitversion_opt, host_to_strategy_to_graph_y_mean_splitversion_opt, host_to_strategy_to_graph_y_upper_splitversion_opt, host_to_strategy_to_graph_y_lower_splitversion_opt, host_to_strategy_to_graph_y_median_splitversion_opt, host_to_strategy_to_graph_y_variance_splitversion_opt, host_to_strategy_to_graph_color_splitversion_opt, host_to_strategy_to_graph_color_maxmin_splitversion_opt, host_to_strategy_to_graph_color_variance_splitversion_opt, host_to_strategy_to_graph_y_percentile_25_splitversion_opt, host_to_strategy_to_graph_y_percentile_75_splitversion_opt, host_to_strategy_to_graph_y_confidence_interval_upper_splitversion_opt, host_to_strategy_to_graph_y_confidence_interval_lower_splitversion_opt = build_graph_data(host_to_strategy_to_step_splitversion_opt)



# Folder
os.mkdir(OUTPUT_DIR+"/validation_analysis_output/")
OUTPUT_DIR = OUTPUT_DIR + "/validation_analysis_output/"



# Plot graphs
print("Plot graphs")
def plot_graphs(plot_name,plot_title,host_to_strategy_to_graph_x, host_to_strategy_to_graph_y_mean, host_to_strategy_to_graph_y_upper, host_to_strategy_to_graph_y_lower, host_to_strategy_to_graph_y_median, host_to_strategy_to_graph_y_variance, host_to_strategy_to_graph_color, host_to_strategy_to_graph_color_maxmin, host_to_strategy_to_graph_color_variance, host_to_strategy_to_graph_y_percentile_25, host_to_strategy_to_graph_y_percentile_75, host_to_strategy_to_graph_y_confidence_interval_upper, host_to_strategy_to_graph_y_confidence_interval_lower, output_to_browser):
    for host_id in host_to_strategy_to_graph_x:
        plot_scatter = list()
        for strategy_id in host_to_strategy_to_graph_x[host_id]:
            # Mean
            plot_scatter.append(go.Scatter(
                x=host_to_strategy_to_graph_x[host_id][strategy_id],
                y=host_to_strategy_to_graph_y_mean[host_id][strategy_id],
                line=dict(color=host_to_strategy_to_graph_color[host_id][strategy_id]),
                mode="lines",
                name=strategy_id
            ))
            """
            # Median
            plot_scatter.append(go.Scatter(
                x=host_to_strategy_to_graph_x[host_id][strategy_id],
                y=host_to_strategy_to_graph_y_median[host_id][strategy_id],
                line=dict(color=host_to_strategy_to_graph_color[host_id][strategy_id],dash="dash"),
                hoverinfo="skip",
                showlegend=False,
                mode="lines",
            ))
            """
            """
            # Max and Min
            plot_scatter.append(go.Scatter(
                x=host_to_strategy_to_graph_x[host_id][strategy_id]+host_to_strategy_to_graph_x[host_id][strategy_id][::-1], # x, then x reversed
                y=host_to_strategy_to_graph_y_upper[host_id][strategy_id]+host_to_strategy_to_graph_y_lower[host_id][strategy_id][::-1], # upper, then lower reversed
                fill='toself',
                fillcolor=host_to_strategy_to_graph_color_maxmin[host_id][strategy_id],
                line=dict(color='rgba(255,255,255,0)'),
                hoverinfo="skip",
                showlegend=False
            ))
            #"""
            #"""
            # Confidence interval
            plot_scatter.append(go.Scatter(
                x=host_to_strategy_to_graph_x[host_id][strategy_id]+host_to_strategy_to_graph_x[host_id][strategy_id][::-1], # x, then x reversed
                y=host_to_strategy_to_graph_y_confidence_interval_lower[host_id][strategy_id]+host_to_strategy_to_graph_y_confidence_interval_upper[host_id][strategy_id][::-1], # upper, then lower reversed
                fill='toself',
                fillcolor=host_to_strategy_to_graph_color_variance[host_id][strategy_id],
                line=dict(color='rgba(255,255,255,0)'),
                hoverinfo="skip",
                showlegend=False
            ))
            #"""
            """
            # 25 and 75
            plot_scatter.append(go.Scatter(
                x=host_to_strategy_to_graph_x[host_id][strategy_id]+host_to_strategy_to_graph_x[host_id][strategy_id][::-1], # x, then x reversed
                y=host_to_strategy_to_graph_y_percentile_75[host_id][strategy_id]+host_to_strategy_to_graph_y_percentile_25[host_id][strategy_id][::-1], # upper, then lower reversed
                fill='toself',
                fillcolor=host_to_strategy_to_graph_color_variance[host_id][strategy_id],
                line=dict(color='rgba(255,255,255,0)'),
                hoverinfo="skip",
                showlegend=False
            ))
            #"""
            """
            # Variance
            variance_area_upper = list()
            variance_area_lower = list()
            for index in range(len(host_to_strategy_to_graph_y_variance[host_id][strategy_id])):
                variance_area_upper.append(host_to_strategy_to_graph_y_mean[host_id][strategy_id][index] + host_to_strategy_to_graph_y_variance[host_id][strategy_id][index])
                variance_area_lower.append(host_to_strategy_to_graph_y_mean[host_id][strategy_id][index] - host_to_strategy_to_graph_y_variance[host_id][strategy_id][index])

            plot_scatter.append(go.Scatter(
                x=host_to_strategy_to_graph_x[host_id][strategy_id]+host_to_strategy_to_graph_x[host_id][strategy_id][::-1], # x, then x reversed
                y=variance_area_upper+variance_area_lower[::-1], # upper, then lower reversed
                fill='toself',
                fillcolor=host_to_strategy_to_graph_color_variance[host_id][strategy_id],
                line=dict(color='rgba(255,255,255,0)'),
                hoverinfo="skip",
                showlegend=False
            ))
            #"""
        title_str = ""
        if plot_title != False:
            title_str=plot_title.capitalize()+" "+HOST_ID_TO_LABEL_NAME[host_id]

        fig = go.Figure(plot_scatter)
        fig.update_layout(
            title_text=title_str,
            font_size=10,
            yaxis_title="Mean of CVEs to validate (90% CIs)",
            xaxis_title="Steps",
            paper_bgcolor='rgba(0,0,0,0)',
            plot_bgcolor='rgba(0,0,0,0)',
            width = 500,
            height = 350
            )
        fig.update_xaxes(
            mirror=True,
            ticks='outside',
            showline=True,
            linecolor='black',
            gridcolor='lightgrey'
        )
        fig.update_yaxes(
            mirror=True,
            ticks='outside',
            showline=True,
            linecolor='black',
            gridcolor='lightgrey',
            rangemode="nonnegative"
        )
        if (output_to_browser == True):
            fig.show()
        #fig.write_image(OUTPUT_DIR+"/scatter_"+plot_name+"_"+HOST_ID_TO_LABEL_NAME[host_id].replace(".","_")+".svg")
        fig.write_image(OUTPUT_DIR+"/scatter_"+plot_name+"_"+HOST_ID_TO_LABEL_NAME[host_id].replace(".","_")+".pdf")
        fig.write_image(OUTPUT_DIR+"/scatter_"+plot_name+"_"+HOST_ID_TO_LABEL_NAME[host_id].replace(".","_")+".png")
    return True


def plot_graphs_cf(plot_name,plot_title,host_to_strategy_to_graph_x, host_to_strategy_to_graph_y_mean, host_to_strategy_to_graph_y_upper, host_to_strategy_to_graph_y_lower, host_to_strategy_to_graph_y_median, host_to_strategy_to_graph_y_variance, host_to_strategy_to_graph_color, host_to_strategy_to_graph_color_maxmin, host_to_strategy_to_graph_color_variance, host_to_strategy_to_graph_y_percentile_25, host_to_strategy_to_graph_y_percentile_75, host_to_strategy_to_graph_y_confidence_interval_upper, host_to_strategy_to_graph_y_confidence_interval_lower, output_to_browser):
    for host_id in host_to_strategy_to_graph_x:
        plot_scatter = list()
        for strategy_id in CF_LIST:
            # Mean
            plot_scatter.append(go.Scatter(
                x=host_to_strategy_to_graph_x[host_id][CF_TO_STRATEGY[strategy_id]],
                y=host_to_strategy_to_graph_y_mean[host_id][CF_TO_STRATEGY[strategy_id]],
                line=dict(color=host_to_strategy_to_graph_color[host_id][CF_TO_STRATEGY[strategy_id]]),
                mode="lines",
                name=strategy_id
            ))
            """
            # Median
            plot_scatter.append(go.Scatter(
                x=host_to_strategy_to_graph_x[host_id][strategy_id],
                y=host_to_strategy_to_graph_y_median[host_id][strategy_id],
                line=dict(color=host_to_strategy_to_graph_color[host_id][strategy_id],dash="dash"),
                hoverinfo="skip",
                showlegend=False,
                mode="lines",
            ))
            """
            """
            # Max and Min
            plot_scatter.append(go.Scatter(
                x=host_to_strategy_to_graph_x[host_id][strategy_id]+host_to_strategy_to_graph_x[host_id][strategy_id][::-1], # x, then x reversed
                y=host_to_strategy_to_graph_y_upper[host_id][strategy_id]+host_to_strategy_to_graph_y_lower[host_id][strategy_id][::-1], # upper, then lower reversed
                fill='toself',
                fillcolor=host_to_strategy_to_graph_color_maxmin[host_id][strategy_id],
                line=dict(color='rgba(255,255,255,0)'),
                hoverinfo="skip",
                showlegend=False
            ))
            #"""
            #"""
            # Confidence interval
            plot_scatter.append(go.Scatter(
                x=host_to_strategy_to_graph_x[host_id][CF_TO_STRATEGY[strategy_id]]+host_to_strategy_to_graph_x[host_id][CF_TO_STRATEGY[strategy_id]][::-1], # x, then x reversed
                y=host_to_strategy_to_graph_y_confidence_interval_lower[host_id][CF_TO_STRATEGY[strategy_id]]+host_to_strategy_to_graph_y_confidence_interval_upper[host_id][CF_TO_STRATEGY[strategy_id]][::-1], # upper, then lower reversed
                fill='toself',
                fillcolor=host_to_strategy_to_graph_color_variance[host_id][CF_TO_STRATEGY[strategy_id]],
                line=dict(color='rgba(255,255,255,0)'),
                hoverinfo="skip",
                showlegend=False
            ))
            #"""
            """
            # 25 and 75
            plot_scatter.append(go.Scatter(
                x=host_to_strategy_to_graph_x[host_id][strategy_id]+host_to_strategy_to_graph_x[host_id][strategy_id][::-1], # x, then x reversed
                y=host_to_strategy_to_graph_y_percentile_75[host_id][strategy_id]+host_to_strategy_to_graph_y_percentile_25[host_id][strategy_id][::-1], # upper, then lower reversed
                fill='toself',
                fillcolor=host_to_strategy_to_graph_color_variance[host_id][strategy_id],
                line=dict(color='rgba(255,255,255,0)'),
                hoverinfo="skip",
                showlegend=False
            ))
            #"""
            """
            # Variance
            variance_area_upper = list()
            variance_area_lower = list()
            for index in range(len(host_to_strategy_to_graph_y_variance[host_id][strategy_id])):
                variance_area_upper.append(host_to_strategy_to_graph_y_mean[host_id][strategy_id][index] + host_to_strategy_to_graph_y_variance[host_id][strategy_id][index])
                variance_area_lower.append(host_to_strategy_to_graph_y_mean[host_id][strategy_id][index] - host_to_strategy_to_graph_y_variance[host_id][strategy_id][index])

            plot_scatter.append(go.Scatter(
                x=host_to_strategy_to_graph_x[host_id][strategy_id]+host_to_strategy_to_graph_x[host_id][strategy_id][::-1], # x, then x reversed
                y=variance_area_upper+variance_area_lower[::-1], # upper, then lower reversed
                fill='toself',
                fillcolor=host_to_strategy_to_graph_color_variance[host_id][strategy_id],
                line=dict(color='rgba(255,255,255,0)'),
                hoverinfo="skip",
                showlegend=False
            ))
            #"""
        title_str = ""
        if plot_title != False:
            title_str=plot_title.capitalize()+" "+HOST_ID_TO_LABEL_NAME[host_id]

        fig = go.Figure(plot_scatter)
        fig.update_layout(
            title_text=title_str,
            font_size=10,
            yaxis_title="Mean of CVEs to validate (90% CIs)",
            xaxis_title="Steps",
            paper_bgcolor='rgba(0,0,0,0)',
            plot_bgcolor='rgba(0,0,0,0)',
            width = 500,
            height = 350
            )
        fig.update_xaxes(
            mirror=True,
            ticks='outside',
            showline=True,
            linecolor='black',
            gridcolor='lightgrey'
        )
        fig.update_yaxes(
            mirror=True,
            ticks='outside',
            showline=True,
            linecolor='black',
            gridcolor='lightgrey',
            rangemode="nonnegative"
        )
        if (output_to_browser == True):
            fig.show()
        #fig.write_image(OUTPUT_DIR+"/scatter_"+plot_name+"_"+HOST_ID_TO_LABEL_NAME[host_id].replace(".","_")+".svg")
        fig.write_image(OUTPUT_DIR+"/scatter_cf_"+plot_name+"_"+HOST_ID_TO_LABEL_NAME[host_id].replace(".","_")+".pdf")
        fig.write_image(OUTPUT_DIR+"/scatter_cf_"+plot_name+"_"+HOST_ID_TO_LABEL_NAME[host_id].replace(".","_")+".png")
    return True




if NO_VERSION == True:
    plot_graphs("no version",False,host_to_strategy_to_graph_x_noversion, host_to_strategy_to_graph_y_mean_noversion, host_to_strategy_to_graph_y_upper_noversion, host_to_strategy_to_graph_y_lower_noversion, host_to_strategy_to_graph_y_median_noversion, host_to_strategy_to_graph_y_variance_noversion, host_to_strategy_to_graph_color_noversion, host_to_strategy_to_graph_color_maxmin_noversion, host_to_strategy_to_graph_color_variance_noversion, host_to_strategy_to_graph_y_percentile_25_noversion, host_to_strategy_to_graph_y_percentile_75_noversion, host_to_strategy_to_graph_y_confidence_interval_upper_noversion, host_to_strategy_to_graph_y_confidence_interval_lower_noversion, PLOT_TO_BROWSER)
    plot_graphs_cf("no version",False,host_to_strategy_to_graph_x_noversion, host_to_strategy_to_graph_y_mean_noversion, host_to_strategy_to_graph_y_upper_noversion, host_to_strategy_to_graph_y_lower_noversion, host_to_strategy_to_graph_y_median_noversion, host_to_strategy_to_graph_y_variance_noversion, host_to_strategy_to_graph_color_noversion, host_to_strategy_to_graph_color_maxmin_noversion, host_to_strategy_to_graph_color_variance_noversion, host_to_strategy_to_graph_y_percentile_25_noversion, host_to_strategy_to_graph_y_percentile_75_noversion, host_to_strategy_to_graph_y_confidence_interval_upper_noversion, host_to_strategy_to_graph_y_confidence_interval_lower_noversion, PLOT_TO_BROWSER)

if SIMPLE_VERSION == True:
    plot_graphs("with version",False,host_to_strategy_to_graph_x_version, host_to_strategy_to_graph_y_mean_version, host_to_strategy_to_graph_y_upper_version, host_to_strategy_to_graph_y_lower_version, host_to_strategy_to_graph_y_median_version, host_to_strategy_to_graph_y_variance_version, host_to_strategy_to_graph_color_version, host_to_strategy_to_graph_color_maxmin_version, host_to_strategy_to_graph_color_variance_version, host_to_strategy_to_graph_y_percentile_25_version, host_to_strategy_to_graph_y_percentile_75_version, host_to_strategy_to_graph_y_confidence_interval_upper_version, host_to_strategy_to_graph_y_confidence_interval_lower_version, PLOT_TO_BROWSER)
    plot_graphs_cf("with version",False,host_to_strategy_to_graph_x_version, host_to_strategy_to_graph_y_mean_version, host_to_strategy_to_graph_y_upper_version, host_to_strategy_to_graph_y_lower_version, host_to_strategy_to_graph_y_median_version, host_to_strategy_to_graph_y_variance_version, host_to_strategy_to_graph_color_version, host_to_strategy_to_graph_color_maxmin_version, host_to_strategy_to_graph_color_variance_version, host_to_strategy_to_graph_y_percentile_25_version, host_to_strategy_to_graph_y_percentile_75_version, host_to_strategy_to_graph_y_confidence_interval_upper_version, host_to_strategy_to_graph_y_confidence_interval_lower_version, PLOT_TO_BROWSER)

if EXTENDED_VERSION == True:
    plot_graphs("with extended version",False,host_to_strategy_to_graph_x_extended_version, host_to_strategy_to_graph_y_mean_extended_version, host_to_strategy_to_graph_y_upper_extended_version, host_to_strategy_to_graph_y_lower_extended_version, host_to_strategy_to_graph_y_median_extended_version, host_to_strategy_to_graph_y_variance_extended_version, host_to_strategy_to_graph_color_extended_version, host_to_strategy_to_graph_color_maxmin_extended_version, host_to_strategy_to_graph_color_variance_extended_version, host_to_strategy_to_graph_y_percentile_25_extended_version, host_to_strategy_to_graph_y_percentile_75_extended_version, host_to_strategy_to_graph_y_confidence_interval_upper_extended_version, host_to_strategy_to_graph_y_confidence_interval_lower_extended_version, PLOT_TO_BROWSER)
    plot_graphs_cf("with extended version",False,host_to_strategy_to_graph_x_extended_version, host_to_strategy_to_graph_y_mean_extended_version, host_to_strategy_to_graph_y_upper_extended_version, host_to_strategy_to_graph_y_lower_extended_version, host_to_strategy_to_graph_y_median_extended_version, host_to_strategy_to_graph_y_variance_extended_version, host_to_strategy_to_graph_color_extended_version, host_to_strategy_to_graph_color_maxmin_extended_version, host_to_strategy_to_graph_color_variance_extended_version, host_to_strategy_to_graph_y_percentile_25_extended_version, host_to_strategy_to_graph_y_percentile_75_extended_version, host_to_strategy_to_graph_y_confidence_interval_upper_extended_version, host_to_strategy_to_graph_y_confidence_interval_lower_extended_version, PLOT_TO_BROWSER)

if SPLIT_VERSION == True:
    plot_graphs("split version",False,host_to_strategy_to_graph_x_splitversion, host_to_strategy_to_graph_y_mean_splitversion, host_to_strategy_to_graph_y_upper_splitversion, host_to_strategy_to_graph_y_lower_splitversion, host_to_strategy_to_graph_y_median_splitversion, host_to_strategy_to_graph_y_variance_splitversion, host_to_strategy_to_graph_color_splitversion, host_to_strategy_to_graph_color_maxmin_splitversion, host_to_strategy_to_graph_color_variance_splitversion, host_to_strategy_to_graph_y_percentile_25_splitversion, host_to_strategy_to_graph_y_percentile_75_splitversion, host_to_strategy_to_graph_y_confidence_interval_upper_splitversion, host_to_strategy_to_graph_y_confidence_interval_lower_splitversion, PLOT_TO_BROWSER)
    plot_graphs_cf("split version",False,host_to_strategy_to_graph_x_splitversion, host_to_strategy_to_graph_y_mean_splitversion, host_to_strategy_to_graph_y_upper_splitversion, host_to_strategy_to_graph_y_lower_splitversion, host_to_strategy_to_graph_y_median_splitversion, host_to_strategy_to_graph_y_variance_splitversion, host_to_strategy_to_graph_color_splitversion, host_to_strategy_to_graph_color_maxmin_splitversion, host_to_strategy_to_graph_color_variance_splitversion, host_to_strategy_to_graph_y_percentile_25_splitversion, host_to_strategy_to_graph_y_percentile_75_splitversion, host_to_strategy_to_graph_y_confidence_interval_upper_splitversion, host_to_strategy_to_graph_y_confidence_interval_lower_splitversion, PLOT_TO_BROWSER)

if SPLIT_VERSION_OPTIMIZATION == True:
    plot_graphs("split version optimized",False,host_to_strategy_to_graph_x_splitversion_opt, host_to_strategy_to_graph_y_mean_splitversion_opt, host_to_strategy_to_graph_y_upper_splitversion_opt, host_to_strategy_to_graph_y_lower_splitversion_opt, host_to_strategy_to_graph_y_median_splitversion_opt, host_to_strategy_to_graph_y_variance_splitversion_opt, host_to_strategy_to_graph_color_splitversion_opt, host_to_strategy_to_graph_color_maxmin_splitversion_opt, host_to_strategy_to_graph_color_variance_splitversion_opt, host_to_strategy_to_graph_y_percentile_25_splitversion_opt, host_to_strategy_to_graph_y_percentile_75_splitversion_opt, host_to_strategy_to_graph_y_confidence_interval_upper_splitversion_opt, host_to_strategy_to_graph_y_confidence_interval_lower_splitversion_opt, PLOT_TO_BROWSER)
    plot_graphs_cf("split version optimized",False,host_to_strategy_to_graph_x_splitversion_opt, host_to_strategy_to_graph_y_mean_splitversion_opt, host_to_strategy_to_graph_y_upper_splitversion_opt, host_to_strategy_to_graph_y_lower_splitversion_opt, host_to_strategy_to_graph_y_median_splitversion_opt, host_to_strategy_to_graph_y_variance_splitversion_opt, host_to_strategy_to_graph_color_splitversion_opt, host_to_strategy_to_graph_color_maxmin_splitversion_opt, host_to_strategy_to_graph_color_variance_splitversion_opt, host_to_strategy_to_graph_y_percentile_25_splitversion_opt, host_to_strategy_to_graph_y_percentile_75_splitversion_opt, host_to_strategy_to_graph_y_confidence_interval_upper_splitversion_opt, host_to_strategy_to_graph_y_confidence_interval_lower_splitversion_opt, PLOT_TO_BROWSER)
