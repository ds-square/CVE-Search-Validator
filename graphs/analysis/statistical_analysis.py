import math
import json

import sys
import os



# Constants
SNAPSHOT_ID = "cyberrange_merged"

COUNT_EMPTY_AS_ZERO = True

USE_NO_VERSION = False
USE_SIMPLE_VERSION = True
USE_EXTENDED_VERSION = True
USE_SPLITTED_VERSION = False # paper 4
USE_SPLITTED_VERSION_OPTIMIZATION = True # paper 4



# Helper functions
def load_csv_to_dict(file_path,seed,mode):
    f = open(file_path,mode="r",encoding="utf-8")
    rawfile = f.readlines()
    f.close()

    retdict = dict()

    first_line = True
    for line in rawfile:
        if first_line:
            first_line = False
        else:
            line = line.strip()
            if line != "":
                splitline = line.split(";")
                # step; open cve; open cpe
                retdict[splitline[0]]={"step":int(splitline[0]),"open_cve":int(splitline[1]),"open_cpe":int(splitline[2]),"seed":int(seed),"mode":int(mode)}

    return retdict


VALIDATION_DATA_DIR = "CVE-Search-Validator/graphs/sequence"
OUTPUT_DIR = "CVE-Search-Validator/graphs/analysis"


host_to_rundata_noversion = dict()
host_to_rundata_version = dict()
host_to_rundata_extended_version = dict()
host_to_rundata_splitversion = dict()
host_to_rundata_splitversion_opt = dict()


for filename in os.listdir(VALIDATION_DATA_DIR):
    if "_dynamic_cpe_sequence_" in filename:
        f = os.path.join(VALIDATION_DATA_DIR, filename)
        # checking if it is a file
        if os.path.isfile(f):
            infostr = filename.replace(SNAPSHOT_ID+"_","").replace("_dynamic_cpe_sequence_","_").replace(".csv","").split("_")
            host_id = infostr[0]
            seed = infostr[1].replace("S","")
            mode = infostr[2].replace("M","")
            variation = infostr[3]
            if len(infostr) == 5:
                variation = variation+"_"+infostr[4]

            loaded = load_csv_to_dict(f,seed,mode)

            mode_string = "RN"
            if mode == "2":
                mode_string = "SR"
            elif mode == "3":
                mode_string = "PP"
            elif mode == "4":
                mode_string = "VS"
            elif mode == "5":
                mode_string = "VP"
            
            if (USE_NO_VERSION==True) and ("noversion" == variation):
                if host_id not in host_to_rundata_noversion:
                    host_to_rundata_noversion[host_id] = dict()
                    host_to_rundata_noversion[host_id]["values"] = list()

                for step in loaded:
                    step_struct = dict()
                    step_struct["strategy"] = mode_string
                    step_struct["run"] = mode_string+"_"+str(seed)
                    step_struct["step"] = int(step)
                    step_struct["remaining_cves"] = loaded[step]["open_cve"]
                    step_struct["remaining_cpes"] = loaded[step]["open_cpe"]

                    host_to_rundata_noversion[host_id]["values"].append(step_struct)
            
            elif (USE_SIMPLE_VERSION==True) and ("version" == variation):
                if host_id not in host_to_rundata_version:
                    host_to_rundata_version[host_id] = dict()
                    host_to_rundata_version[host_id]["values"] = list()

                for step in loaded:
                    step_struct = dict()
                    step_struct["strategy"] = mode_string
                    step_struct["run"] = mode_string+"_"+str(seed)
                    step_struct["step"] = int(step)
                    step_struct["remaining_cves"] = loaded[step]["open_cve"]
                    step_struct["remaining_cpes"] = loaded[step]["open_cpe"]

                    host_to_rundata_version[host_id]["values"].append(step_struct)
                
            elif (USE_EXTENDED_VERSION==True) and ("extended_version" == variation):
                if host_id not in host_to_rundata_extended_version:
                    host_to_rundata_extended_version[host_id] = dict()
                    host_to_rundata_extended_version[host_id]["values"] = list()

                for step in loaded:
                    step_struct = dict()
                    step_struct["strategy"] = mode_string
                    step_struct["run"] = mode_string+"_"+str(seed)
                    step_struct["step"] = int(step)
                    step_struct["remaining_cves"] = loaded[step]["open_cve"]
                    step_struct["remaining_cpes"] = loaded[step]["open_cpe"]

                    host_to_rundata_extended_version[host_id]["values"].append(step_struct)

            elif (USE_SPLITTED_VERSION==True) and ("splitversion" == variation):
                if host_id not in host_to_rundata_splitversion:
                    host_to_rundata_splitversion[host_id] = dict()
                    host_to_rundata_splitversion[host_id]["values"] = list()

                for step in loaded:
                    step_struct = dict()
                    step_struct["strategy"] = mode_string
                    step_struct["run"] = mode_string+"_"+str(seed)
                    step_struct["step"] = int(step)
                    step_struct["remaining_cves"] = loaded[step]["open_cve"]
                    step_struct["remaining_cpes"] = loaded[step]["open_cpe"]

                    host_to_rundata_splitversion[host_id]["values"].append(step_struct)

            elif (USE_SPLITTED_VERSION_OPTIMIZATION==True) and ("splitversion_opt" == variation):
                if host_id not in host_to_rundata_splitversion_opt:
                    host_to_rundata_splitversion_opt[host_id] = dict()
                    host_to_rundata_splitversion_opt[host_id]["values"] = list()

                for step in loaded:
                    step_struct = dict()
                    step_struct["strategy"] = mode_string
                    step_struct["run"] = mode_string+"_"+str(seed)
                    step_struct["step"] = int(step)
                    step_struct["remaining_cves"] = loaded[step]["open_cve"]
                    step_struct["remaining_cpes"] = loaded[step]["open_cpe"]

                    host_to_rundata_splitversion_opt[host_id]["values"].append(step_struct)




# Padding
def sort_elems(elem):
    return elem["run"]

if COUNT_EMPTY_AS_ZERO == True:
    if USE_NO_VERSION == True:
        for host_id in host_to_rundata_noversion:
            max_move = 0
            run_to_max_move = dict()
            for value_struct in host_to_rundata_noversion[host_id]["values"]:
                max_move = max(max_move,value_struct["step"])
                if value_struct["run"] not in run_to_max_move:
                    run_to_max_move[value_struct["run"]] = 0
                run_to_max_move[value_struct["run"]] = max(run_to_max_move[value_struct["run"]],value_struct["step"])

            for run in run_to_max_move:
                for i in range(max_move-run_to_max_move[run]):
                    step_struct = dict()
                    step_struct["strategy"] = run[:2]
                    step_struct["run"] = run
                    step_struct["step"] = i+1+run_to_max_move[run]
                    step_struct["remaining_cves"] = 0
                    step_struct["remaining_cpes"] = 0

                    host_to_rundata_noversion[host_id]["values"].append(step_struct)
            host_to_rundata_noversion[host_id]["values"].sort(reverse=False,key=sort_elems)

    if USE_SIMPLE_VERSION == True:
        for host_id in host_to_rundata_version:
            max_move = 0
            run_to_max_move = dict()
            for value_struct in host_to_rundata_version[host_id]["values"]:
                max_move = max(max_move,value_struct["step"])
                if value_struct["run"] not in run_to_max_move:
                    run_to_max_move[value_struct["run"]] = 0
                run_to_max_move[value_struct["run"]] = max(run_to_max_move[value_struct["run"]],value_struct["step"])

            for run in run_to_max_move:
                for i in range(max_move-run_to_max_move[run]):
                    step_struct = dict()
                    step_struct["strategy"] = run[:2]
                    step_struct["run"] = run
                    step_struct["step"] = i+1+run_to_max_move[run]
                    step_struct["remaining_cves"] = 0
                    step_struct["remaining_cpes"] = 0

                    host_to_rundata_version[host_id]["values"].append(step_struct)
            host_to_rundata_version[host_id]["values"].sort(reverse=False,key=sort_elems)

    if USE_EXTENDED_VERSION == True:
        for host_id in host_to_rundata_extended_version:
            max_move = 0
            run_to_max_move = dict()
            for value_struct in host_to_rundata_extended_version[host_id]["values"]:
                max_move = max(max_move,value_struct["step"])
                if value_struct["run"] not in run_to_max_move:
                    run_to_max_move[value_struct["run"]] = 0
                run_to_max_move[value_struct["run"]] = max(run_to_max_move[value_struct["run"]],value_struct["step"])

            for run in run_to_max_move:
                for i in range(max_move-run_to_max_move[run]):
                    step_struct = dict()
                    step_struct["strategy"] = run[:2]
                    step_struct["run"] = run
                    step_struct["step"] = i+1+run_to_max_move[run]
                    step_struct["remaining_cves"] = 0
                    step_struct["remaining_cpes"] = 0

                    host_to_rundata_extended_version[host_id]["values"].append(step_struct)
            host_to_rundata_extended_version[host_id]["values"].sort(reverse=False,key=sort_elems)

    if USE_SPLITTED_VERSION == True:
        for host_id in host_to_rundata_splitversion:
            max_move = 0
            run_to_max_move = dict()
            for value_struct in host_to_rundata_splitversion[host_id]["values"]:
                max_move = max(max_move,value_struct["step"])
                if value_struct["run"] not in run_to_max_move:
                    run_to_max_move[value_struct["run"]] = 0
                run_to_max_move[value_struct["run"]] = max(run_to_max_move[value_struct["run"]],value_struct["step"])

            for run in run_to_max_move:
                for i in range(max_move-run_to_max_move[run]):
                    step_struct = dict()
                    step_struct["strategy"] = run[:2]
                    step_struct["run"] = run
                    step_struct["step"] = i+1+run_to_max_move[run]
                    step_struct["remaining_cves"] = 0
                    step_struct["remaining_cpes"] = 0

                    host_to_rundata_splitversion[host_id]["values"].append(step_struct)
            host_to_rundata_splitversion[host_id]["values"].sort(reverse=False,key=sort_elems)

    if USE_SPLITTED_VERSION_OPTIMIZATION == True:
        for host_id in host_to_rundata_splitversion_opt:
            max_move = 0
            run_to_max_move = dict()
            for value_struct in host_to_rundata_splitversion_opt[host_id]["values"]:
                max_move = max(max_move,value_struct["step"])
                if value_struct["run"] not in run_to_max_move:
                    run_to_max_move[value_struct["run"]] = 0
                run_to_max_move[value_struct["run"]] = max(run_to_max_move[value_struct["run"]],value_struct["step"])

            for run in run_to_max_move:
                for i in range(max_move-run_to_max_move[run]):
                    step_struct = dict()
                    step_struct["strategy"] = run[:2]
                    step_struct["run"] = run
                    step_struct["step"] = i+1+run_to_max_move[run]
                    step_struct["remaining_cves"] = 0
                    step_struct["remaining_cpes"] = 0

                    host_to_rundata_splitversion_opt[host_id]["values"].append(step_struct)
            host_to_rundata_splitversion_opt[host_id]["values"].sort(reverse=False,key=sort_elems)




if USE_NO_VERSION == True:
    for host_id in host_to_rundata_noversion:
        f = open(OUTPUT_DIR+"/analyzed_sequence/noversion/run_data_for_"+host_id.replace(".","_")+".json",mode="w",encoding="utf-8")
        f.write(json.dumps(host_to_rundata_noversion[host_id]))
        f.close()

if USE_SIMPLE_VERSION == True:
    for host_id in host_to_rundata_version:
        f = open(OUTPUT_DIR+"/analyzed_sequence/version/run_data_for_"+host_id.replace(".","_")+".json",mode="w",encoding="utf-8")
        f.write(json.dumps(host_to_rundata_version[host_id]))
        f.close()

if USE_EXTENDED_VERSION == True:
    for host_id in host_to_rundata_extended_version:
        f = open(OUTPUT_DIR+"/analyzed_sequence/extended_version/run_data_for_"+host_id.replace(".","_")+".json",mode="w",encoding="utf-8")
        f.write(json.dumps(host_to_rundata_extended_version[host_id]))
        f.close()

if USE_SPLITTED_VERSION == True:
    for host_id in host_to_rundata_splitversion:
        f = open(OUTPUT_DIR+"/analyzed_sequence/splitversion/run_data_for_"+host_id.replace(".","_")+".json",mode="w",encoding="utf-8")
        f.write(json.dumps(host_to_rundata_splitversion[host_id]))
        f.close()

if USE_SPLITTED_VERSION_OPTIMIZATION == True:
    for host_id in host_to_rundata_splitversion_opt:
        f = open(OUTPUT_DIR+"/analyzed_sequence/splitversion_opt/run_data_for_"+host_id.replace(".","_")+".json",mode="w",encoding="utf-8")
        f.write(json.dumps(host_to_rundata_splitversion_opt[host_id]))
        f.close()




#Host, strategy, move, open cve mean
#HOST	STRATEGY	MOVE	RELEVANT_SAMPLES	OPEN_CVE_MEAN	OPEN_CVE_MIN	OPEN_CVE_MAX	CONFIRMED_CVE_MEAN	CONFIRMED_CVE_MIN	CONFIRMED_CVE_MAX	DISCARDED_CVE_MEAN	DISCARDED_CVE_MIN	DISCARDED_CVE_MAX

mean_data_noversion = dict()
if USE_NO_VERSION == True:
    for host_id in host_to_rundata_noversion:
        mean_data_noversion[host_id] = dict()
        for elem in host_to_rundata_noversion[host_id]["values"]:
            strategy_id = elem["strategy"]
            move = elem["step"]

            if strategy_id not in mean_data_noversion[host_id]:
                mean_data_noversion[host_id][strategy_id] = dict()
            if move not in mean_data_noversion[host_id][strategy_id]:
                mean_data_noversion[host_id][strategy_id][move] = list()

            mean_data_noversion[host_id][strategy_id][move].append(elem["remaining_cves"])

mean_data_version = dict()
if USE_SIMPLE_VERSION == True:
    for host_id in host_to_rundata_version:
        mean_data_version[host_id] = dict()
        for elem in host_to_rundata_version[host_id]["values"]:
            strategy_id = elem["strategy"]
            move = elem["step"]

            if strategy_id not in mean_data_version[host_id]:
                mean_data_version[host_id][strategy_id] = dict()
            if move not in mean_data_version[host_id][strategy_id]:
                mean_data_version[host_id][strategy_id][move] = list()

            mean_data_version[host_id][strategy_id][move].append(elem["remaining_cves"])

mean_data_extended_version = dict()
if USE_EXTENDED_VERSION == True:
    for host_id in host_to_rundata_extended_version:
        mean_data_extended_version[host_id] = dict()
        for elem in host_to_rundata_extended_version[host_id]["values"]:
            strategy_id = elem["strategy"]
            move = elem["step"]

            if strategy_id not in mean_data_extended_version[host_id]:
                mean_data_extended_version[host_id][strategy_id] = dict()
            if move not in mean_data_extended_version[host_id][strategy_id]:
                mean_data_extended_version[host_id][strategy_id][move] = list()

            mean_data_extended_version[host_id][strategy_id][move].append(elem["remaining_cves"])

mean_data_splitversion = dict()
if USE_SPLITTED_VERSION == True:
    for host_id in host_to_rundata_splitversion:
        mean_data_splitversion[host_id] = dict()
        for elem in host_to_rundata_splitversion[host_id]["values"]:
            strategy_id = elem["strategy"]
            move = elem["step"]

            if strategy_id not in mean_data_splitversion[host_id]:
                mean_data_splitversion[host_id][strategy_id] = dict()
            if move not in mean_data_splitversion[host_id][strategy_id]:
                mean_data_splitversion[host_id][strategy_id][move] = list()

            mean_data_splitversion[host_id][strategy_id][move].append(elem["remaining_cves"])

mean_data_splitversion_opt = dict()
if USE_SPLITTED_VERSION_OPTIMIZATION == True:
    for host_id in host_to_rundata_splitversion_opt:
        mean_data_splitversion_opt[host_id] = dict()
        for elem in host_to_rundata_splitversion_opt[host_id]["values"]:
            strategy_id = elem["strategy"]
            move = elem["step"]

            if strategy_id not in mean_data_splitversion_opt[host_id]:
                mean_data_splitversion_opt[host_id][strategy_id] = dict()
            if move not in mean_data_splitversion_opt[host_id][strategy_id]:
                mean_data_splitversion_opt[host_id][strategy_id][move] = list()

            mean_data_splitversion_opt[host_id][strategy_id][move].append(elem["remaining_cves"])



if USE_NO_VERSION == True:
    f = open(OUTPUT_DIR+"/analyzed_sequence/noversion/mean_max_cve.csv",mode="w",encoding="utf-8")
    f.write("HOST;STRATEGY;MOVE;DUMMY;OPEN_CVE_MEAN;DUMMY;DUMMY;DUMMY;DUMMY;DUMMY;DUMMY;DUMMY;DUMMY\n")
    for host_id in mean_data_noversion:
        for strategy_id in mean_data_noversion[host_id]:
            for move_id in mean_data_noversion[host_id][strategy_id]:
                open_cve = sum(mean_data_noversion[host_id][strategy_id][move_id])/len(mean_data_noversion[host_id][strategy_id][move_id])
                f.write(str(host_id)+";"+str(strategy_id)+";"+str(move_id)+";0;"+str(open_cve)+";0;0;0;0;0;0;0;0\n")
    f.close()

if USE_SIMPLE_VERSION == True:
    f = open(OUTPUT_DIR+"/analyzed_sequence/version/mean_max_cve.csv",mode="w",encoding="utf-8")
    f.write("HOST;STRATEGY;MOVE;DUMMY;OPEN_CVE_MEAN;DUMMY;DUMMY;DUMMY;DUMMY;DUMMY;DUMMY;DUMMY;DUMMY\n")
    for host_id in mean_data_version:
        for strategy_id in mean_data_version[host_id]:
            for move_id in mean_data_version[host_id][strategy_id]:
                open_cve = sum(mean_data_version[host_id][strategy_id][move_id])/len(mean_data_version[host_id][strategy_id][move_id])
                f.write(str(host_id)+";"+str(strategy_id)+";"+str(move_id)+";0;"+str(open_cve)+";0;0;0;0;0;0;0;0\n")
    f.close()

if USE_EXTENDED_VERSION == True:
    f = open(OUTPUT_DIR+"/analyzed_sequence/extended_version/mean_max_cve.csv",mode="w",encoding="utf-8")
    f.write("HOST;STRATEGY;MOVE;DUMMY;OPEN_CVE_MEAN;DUMMY;DUMMY;DUMMY;DUMMY;DUMMY;DUMMY;DUMMY;DUMMY\n")
    for host_id in mean_data_extended_version:
        for strategy_id in mean_data_extended_version[host_id]:
            for move_id in mean_data_extended_version[host_id][strategy_id]:
                open_cve = sum(mean_data_extended_version[host_id][strategy_id][move_id])/len(mean_data_extended_version[host_id][strategy_id][move_id])
                f.write(str(host_id)+";"+str(strategy_id)+";"+str(move_id)+";0;"+str(open_cve)+";0;0;0;0;0;0;0;0\n")
    f.close()

if USE_SPLITTED_VERSION == True:
    f = open(OUTPUT_DIR+"/analyzed_sequence/splitversion/mean_max_cve.csv",mode="w",encoding="utf-8")
    f.write("HOST;STRATEGY;MOVE;DUMMY;OPEN_CVE_MEAN;DUMMY;DUMMY;DUMMY;DUMMY;DUMMY;DUMMY;DUMMY;DUMMY\n")
    for host_id in mean_data_splitversion:
        for strategy_id in mean_data_splitversion[host_id]:
            for move_id in mean_data_splitversion[host_id][strategy_id]:
                open_cve = sum(mean_data_splitversion[host_id][strategy_id][move_id])/len(mean_data_splitversion[host_id][strategy_id][move_id])
                f.write(str(host_id)+";"+str(strategy_id)+";"+str(move_id)+";0;"+str(open_cve)+";0;0;0;0;0;0;0;0\n")
    f.close()

if USE_SPLITTED_VERSION_OPTIMIZATION == True:
    f = open(OUTPUT_DIR+"/analyzed_sequence/splitversion_opt/mean_max_cve.csv",mode="w",encoding="utf-8")
    f.write("HOST;STRATEGY;MOVE;DUMMY;OPEN_CVE_MEAN;DUMMY;DUMMY;DUMMY;DUMMY;DUMMY;DUMMY;DUMMY;DUMMY\n")
    for host_id in mean_data_splitversion_opt:
        for strategy_id in mean_data_splitversion_opt[host_id]:
            for move_id in mean_data_splitversion_opt[host_id][strategy_id]:
                open_cve = sum(mean_data_splitversion_opt[host_id][strategy_id][move_id])/len(mean_data_splitversion_opt[host_id][strategy_id][move_id])
                f.write(str(host_id)+";"+str(strategy_id)+";"+str(move_id)+";0;"+str(open_cve)+";0;0;0;0;0;0;0;0\n")
    f.close()
