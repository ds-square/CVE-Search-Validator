import json
import math
import numpy
import statistics

import scipy.stats as st
import plotly.graph_objects as go

import os



VALIDATION_DATA_DIR = "CVE-Search-Validator/graphs/analysis/analyzed_sequence"
OUTPUT_DIR = "CVE-Search-Validator/graphs/analysis/output"

NO_VERSION = False
SIMPLE_VERSION = True
EXTENDED_VERSION = True
SPLIT_VERSION = False
SPLIT_VERSION_OPTIMIZATION = True



HOST_ID_TO_LABEL_NAME = {
    "172.25.0.14":"H0",
    "172.25.0.13":"H1",
    "172.25.0.17":"H2",
    "172.25.0.18":"H3",
    "172.25.0.16":"H4",
    "172.25.0.15":"H5",
    "172.25.0.12":"H6",
    "172.25.0.11":"H7"
}

HOST_ID_TO_LABEL_NAME_REVERSED = {
    "H0":"172.25.0.14",
    "H1":"172.25.0.13",
    "H2":"172.25.0.17",
    "H3":"172.25.0.18",
    "H4":"172.25.0.16",
    "H5":"172.25.0.15",
    "H6":"172.25.0.12",
    "H7":"172.25.0.11"
}




# Load files for no version
print("Load files for no version")
host_to_rundata_noversion = dict()

if NO_VERSION==True:
    host_to_rundata_noversion = dict()
    if os.path.isdir(VALIDATION_DATA_DIR+"/noversion/"):
        for filename in os.listdir(VALIDATION_DATA_DIR+"/noversion/"):
            if "run_data_for_" in filename:
                f = os.path.join(VALIDATION_DATA_DIR+"/noversion/", filename)
                # checking if it is a file
                if os.path.isfile(f):
                    host_id = filename[filename.find("run_data_for_"):].replace("run_data_for_","").replace(".json","").replace("_",".")
                    
                    fp = open(file=f,mode="r",encoding="utf-8")
                    host_to_rundata_noversion[host_id] = json.loads(fp.read())
                    fp.close()


# Load files for simple version
print("Load files for simple version")
host_to_rundata_version = dict()

if SIMPLE_VERSION == True:
    host_to_rundata_version = dict()
    if os.path.isdir(VALIDATION_DATA_DIR+"/version/"):
        for filename in os.listdir(VALIDATION_DATA_DIR+"/version/"):
            if "run_data_for_" in filename:
                f = os.path.join(VALIDATION_DATA_DIR+"/version/", filename)
                # checking if it is a file
                if os.path.isfile(f):
                    host_id = filename[filename.find("run_data_for_"):].replace("run_data_for_","").replace(".json","").replace("_",".")
                    
                    fp = open(file=f,mode="r",encoding="utf-8")
                    host_to_rundata_version[host_id] = json.loads(fp.read())
                    fp.close()


# Load files for extended version
print("Load files for extended version")
host_to_rundata_extended_version = dict()

if EXTENDED_VERSION == True:
    host_to_rundata_extended_version = dict()
    if os.path.isdir(VALIDATION_DATA_DIR+"/extended_version/"):
        for filename in os.listdir(VALIDATION_DATA_DIR+"/extended_version/"):
            if "run_data_for_" in filename:
                f = os.path.join(VALIDATION_DATA_DIR+"/extended_version/", filename)
                # checking if it is a file
                if os.path.isfile(f):
                    host_id = filename[filename.find("run_data_for_"):].replace("run_data_for_","").replace(".json","").replace("_",".")
                    
                    fp = open(file=f,mode="r",encoding="utf-8")
                    host_to_rundata_extended_version[host_id] = json.loads(fp.read())
                    fp.close()



# Load files for split version
print("Load files for split version")
host_to_rundata_splitversion = dict()

if SPLIT_VERSION == True:
    host_to_rundata_splitversion = dict()
    if os.path.isdir(VALIDATION_DATA_DIR+"/splitversion/"):
        for filename in os.listdir(VALIDATION_DATA_DIR+"/splitversion/"):
            if "run_data_for_" in filename:
                f = os.path.join(VALIDATION_DATA_DIR+"/splitversion/", filename)
                # checking if it is a file
                if os.path.isfile(f):
                    host_id = filename[filename.find("run_data_for_"):].replace("run_data_for_","").replace(".json","").replace("_",".")
                    
                    fp = open(file=f,mode="r",encoding="utf-8")
                    host_to_rundata_splitversion[host_id] = json.loads(fp.read())
                    fp.close()



# Load files for split version oprimization
print("Load files for split version oprimization")
host_to_rundata_splitversion_opt = dict()

if SPLIT_VERSION_OPTIMIZATION == True:
    host_to_rundata_splitversion_opt = dict()
    if os.path.isdir(VALIDATION_DATA_DIR+"/splitversion_opt/"):
        for filename in os.listdir(VALIDATION_DATA_DIR+"/splitversion_opt/"):
            if "run_data_for_" in filename:
                f = os.path.join(VALIDATION_DATA_DIR+"/splitversion_opt/", filename)
                # checking if it is a file
                if os.path.isfile(f):
                    host_id = filename[filename.find("run_data_for_"):].replace("run_data_for_","").replace(".json","").replace("_",".")
                    
                    fp = open(file=f,mode="r",encoding="utf-8")
                    host_to_rundata_splitversion_opt[host_id] = json.loads(fp.read())
                    fp.close()



# Divide into runs
def divide_into_runs(local_host_to_rundata):
    out_host_to_strategy_to_step = dict()
    for host_id in local_host_to_rundata:
        out_host_to_strategy_to_step[host_id] = dict()
        for entry in local_host_to_rundata[host_id]["values"]:
            strategy = entry["strategy"]
            run_number = entry["strategy"].replace(strategy+"_","")
            step = entry["step"]

            if strategy not in out_host_to_strategy_to_step[host_id]:
                out_host_to_strategy_to_step[host_id][strategy] = dict()
            
            if step not in out_host_to_strategy_to_step[host_id][strategy]:
                out_host_to_strategy_to_step[host_id][strategy][step] = list()
            
            out_host_to_strategy_to_step[host_id][strategy][step].append(entry["remaining_cves"])


    # Cut unnecessary zeroes
    new_host_to_strategy_to_step = dict()
    for host_id in out_host_to_strategy_to_step:
        new_host_to_strategy_to_step[host_id] = dict()
        for strategy_id in out_host_to_strategy_to_step[host_id]:
            first_zero = True
            new_host_to_strategy_to_step[host_id][strategy_id] = dict()
            for step in out_host_to_strategy_to_step[host_id][strategy_id]:
                if (sum(out_host_to_strategy_to_step[host_id][strategy_id][step]) == 0):
                    if (first_zero == True):
                        first_zero = False
                        new_host_to_strategy_to_step[host_id][strategy_id][step] = out_host_to_strategy_to_step[host_id][strategy_id][step]
                else:
                    new_host_to_strategy_to_step[host_id][strategy_id][step] = out_host_to_strategy_to_step[host_id][strategy_id][step]
    out_host_to_strategy_to_step = new_host_to_strategy_to_step

    return out_host_to_strategy_to_step



# Divide into runs, noversion
print("Divide into runs, noversion")
host_to_strategy_to_step_noversion = dict()
if NO_VERSION==True:
    host_to_strategy_to_step_noversion = divide_into_runs(host_to_rundata_noversion)

# Divide into runs, version
print("Divide into runs, version")
host_to_strategy_to_step_version = dict()
if SIMPLE_VERSION==True:
    host_to_strategy_to_step_version = divide_into_runs(host_to_rundata_version)

# Divide into runs, extended version
print("Divide into runs, extended version")
host_to_strategy_to_step_extended_version = dict()
if EXTENDED_VERSION==True:
    host_to_strategy_to_step_extended_version = divide_into_runs(host_to_rundata_extended_version)

# Divide into runs, splitversion
host_to_strategy_to_step_splitversion = dict()
if SPLIT_VERSION == True:
    print("Divide into runs, splitversion")
    host_to_strategy_to_step_splitversion = divide_into_runs(host_to_rundata_splitversion)

# Divide into runs, splitversion_opt
host_to_strategy_to_step_splitversion_opt = dict()
if SPLIT_VERSION_OPTIMIZATION == True:
    print("Divide into runs, splitversion_opt")
    host_to_strategy_to_step_splitversion_opt = divide_into_runs(host_to_rundata_splitversion_opt)





# Build data
print("Build data")
def build_data(host_to_strategy_to_step):
    host_to_strategy_to_final_mean = dict()
    host_to_strategy_to_final_upper = dict()
    host_to_strategy_to_final_lower = dict()
    host_to_strategy_to_final_confidence_interval_upper = dict()
    host_to_strategy_to_final_confidence_interval_lower = dict()

    for host_id in host_to_strategy_to_step:
        host_to_strategy_to_final_mean[host_id] = dict()
        host_to_strategy_to_final_upper[host_id] = dict()
        host_to_strategy_to_final_lower[host_id] = dict()
        host_to_strategy_to_final_confidence_interval_upper[host_id] = dict()
        host_to_strategy_to_final_confidence_interval_lower[host_id] = dict()
        
        for strategy_id in host_to_strategy_to_step[host_id]:
            host_to_strategy_to_final_mean[host_id][strategy_id] = 0
            host_to_strategy_to_final_upper[host_id][strategy_id] = 0
            host_to_strategy_to_final_lower[host_id][strategy_id] = len(host_to_strategy_to_step[host_id][strategy_id])
            host_to_strategy_to_final_confidence_interval_upper[host_id][strategy_id] = 0
            host_to_strategy_to_final_confidence_interval_lower[host_id][strategy_id] = 0

            final_step_list = list()

            for sample_id in range(len(host_to_strategy_to_step[host_id][strategy_id][0])):
                final_step_list.append(0)

            for step_id in host_to_strategy_to_step[host_id][strategy_id]:
                for sample_id in range(len(host_to_strategy_to_step[host_id][strategy_id][step_id])):
                    value = host_to_strategy_to_step[host_id][strategy_id][step_id][sample_id]
                    if (value == 0) and (final_step_list[sample_id] == 0):
                        final_step_list[sample_id] = step_id

            for final_step in final_step_list:
                host_to_strategy_to_final_mean[host_id][strategy_id] = host_to_strategy_to_final_mean[host_id][strategy_id] + final_step
                host_to_strategy_to_final_upper[host_id][strategy_id] = max(final_step,host_to_strategy_to_final_upper[host_id][strategy_id])
                host_to_strategy_to_final_lower[host_id][strategy_id] = min(final_step,host_to_strategy_to_final_lower[host_id][strategy_id])

            host_to_strategy_to_final_mean[host_id][strategy_id] = host_to_strategy_to_final_mean[host_id][strategy_id]/len(final_step_list)

            # alpha is the CI %
            host_to_strategy_to_final_confidence_interval_lower[host_id][strategy_id], host_to_strategy_to_final_confidence_interval_upper[host_id][strategy_id] = st.t.interval(alpha = 0.90, df = len(final_step_list)-1, loc = host_to_strategy_to_final_mean[host_id][strategy_id], scale = st.sem(final_step_list))
                
    return host_to_strategy_to_final_mean, host_to_strategy_to_final_upper, host_to_strategy_to_final_lower, host_to_strategy_to_final_confidence_interval_upper, host_to_strategy_to_final_confidence_interval_lower



if NO_VERSION == True:
    host_to_strategy_to_mean_noversion, host_to_strategy_to_upper_noversion, host_to_strategy_to_lower_noversion, host_to_strategy_to_confidence_interval_upper_noversion, host_to_strategy_to_confidence_interval_lower_noversion = build_data(host_to_strategy_to_step_noversion)

if SIMPLE_VERSION == True:
    host_to_strategy_to_mean_version, host_to_strategy_to_upper_version, host_to_strategy_to_lower_version, host_to_strategy_to_confidence_interval_upper_version, host_to_strategy_to_confidence_interval_lower_version = build_data(host_to_strategy_to_step_version)

if EXTENDED_VERSION == True:
    host_to_strategy_to_mean_extended_version, host_to_strategy_to_upper_extended_version, host_to_strategy_to_lower_extended_version, host_to_strategy_to_confidence_interval_upper_extended_version, host_to_strategy_to_confidence_interval_lower_extended_version = build_data(host_to_strategy_to_step_extended_version)

if SPLIT_VERSION == True:
    host_to_strategy_to_mean_splitversion, host_to_strategy_to_upper_splitversion, host_to_strategy_to_lower_splitversion, host_to_strategy_to_confidence_interval_upper_splitversion, host_to_strategy_to_confidence_interval_lower_splitversion = build_data(host_to_strategy_to_step_splitversion)
 
if SPLIT_VERSION_OPTIMIZATION == True:
    host_to_strategy_to_mean_splitversion_opt, host_to_strategy_to_upper_splitversion_opt, host_to_strategy_to_lower_splitversion_opt, host_to_strategy_to_confidence_interval_upper_splitversion_opt, host_to_strategy_to_confidence_interval_lower_splitversion_opt = build_data(host_to_strategy_to_step_splitversion_opt)



# Folder
os.mkdir(OUTPUT_DIR+"/validation_final_state_analysis_output/")
OUTPUT_DIR = OUTPUT_DIR + "/validation_final_state_analysis_output/"



# Save statistics to disk
# TODO fix median, CI and C0
print("Save stats")
def save_stats_to_disk(stats_name,host_to_strategy_to_mean,host_to_strategy_to_confidence_interval_upper, host_to_strategy_to_confidence_interval_lower):
    f = open(file=OUTPUT_DIR+stats_name+"_stats.csv",mode="w",encoding="utf-8")
    f.write("HOST;STRATEGY;FINAL_CI1;FINAL_MEAN;FINAL_CI0\n")
    for host in host_to_strategy_to_mean:
        for strategy in host_to_strategy_to_mean[host]:
            f.write(str(HOST_ID_TO_LABEL_NAME[host])+";"+str(strategy)+";"
                    +str(round(host_to_strategy_to_confidence_interval_upper[host][strategy],2)).replace(".",",")+";"
                    +str(round(host_to_strategy_to_mean[host][strategy],2)).replace(".",",")+";"
                    +str(round(host_to_strategy_to_confidence_interval_lower[host][strategy],2)).replace(".",",")+"\n")
    f.close()

if NO_VERSION == True:
    save_stats_to_disk("merged no version", host_to_strategy_to_mean_noversion, host_to_strategy_to_confidence_interval_upper_noversion, host_to_strategy_to_confidence_interval_lower_noversion)

if SIMPLE_VERSION == True:
    save_stats_to_disk("merged with version", host_to_strategy_to_mean_version, host_to_strategy_to_confidence_interval_upper_version, host_to_strategy_to_confidence_interval_lower_version)

if EXTENDED_VERSION == True:
    save_stats_to_disk("merged with extended version", host_to_strategy_to_mean_extended_version, host_to_strategy_to_confidence_interval_upper_extended_version, host_to_strategy_to_confidence_interval_lower_extended_version)

if SPLIT_VERSION == True:
    save_stats_to_disk("merged split version", host_to_strategy_to_mean_splitversion, host_to_strategy_to_confidence_interval_upper_splitversion, host_to_strategy_to_confidence_interval_lower_splitversion)

if SPLIT_VERSION_OPTIMIZATION == True:
    save_stats_to_disk("merged split version optimized", host_to_strategy_to_mean_splitversion_opt, host_to_strategy_to_confidence_interval_upper_splitversion_opt, host_to_strategy_to_confidence_interval_lower_splitversion_opt)



# Save latex table to disk
STRATEGY_SEQUENCE = ["RN","SR","PP","VS","VP"]

def save_latex_table(stats_name,host_to_strategy_to_mean,host_to_strategy_to_confidence_interval_upper, host_to_strategy_to_confidence_interval_lower):
    f = open(file=OUTPUT_DIR+stats_name+"_stats_latex.txt",mode="w",encoding="utf-8")
    f.write("\multirow{2}{*}{Host} & \multirow{2}{*}{Metric} & \multicolumn{5}{c}{Strategies} \\\\ \cline{3-7}\n")
    f.write("& & RN & SR & PP & VS & VP \\\\ \hline\n")
    for host in HOST_ID_TO_LABEL_NAME:
        f.write("\multirow{3}{*}{"+HOST_ID_TO_LABEL_NAME[host]+"}")
        f.write("& \\textit{Ci1} ")
        for strategy in STRATEGY_SEQUENCE:
            f.write("& $"+str(round(host_to_strategy_to_confidence_interval_upper[host][strategy],2))+"$ ")
        f.write("\\\\ \n")
        f.write("& \\textit{Mean} ")
        for strategy in STRATEGY_SEQUENCE:
            f.write("& $"+str(round(host_to_strategy_to_mean[host][strategy],2))+"$ ")
        f.write("\\\\ \n")
        f.write("& \\textit{Ci0} ")
        for strategy in STRATEGY_SEQUENCE:
            f.write("& $"+str(round(host_to_strategy_to_confidence_interval_lower[host][strategy],2))+"$ ")
        f.write("\\\\ \hline\n")
    f.close()

if NO_VERSION == True:
    save_latex_table("merged no version", host_to_strategy_to_mean_noversion, host_to_strategy_to_confidence_interval_upper_noversion, host_to_strategy_to_confidence_interval_lower_noversion)

if SIMPLE_VERSION == True:
    save_latex_table("merged with version", host_to_strategy_to_mean_version, host_to_strategy_to_confidence_interval_upper_version, host_to_strategy_to_confidence_interval_lower_version)

if EXTENDED_VERSION == True:
    save_latex_table("merged with extended version", host_to_strategy_to_mean_extended_version, host_to_strategy_to_confidence_interval_upper_extended_version, host_to_strategy_to_confidence_interval_lower_extended_version)

if SPLIT_VERSION == True:
    save_latex_table("merged split version", host_to_strategy_to_mean_splitversion, host_to_strategy_to_confidence_interval_upper_splitversion, host_to_strategy_to_confidence_interval_lower_splitversion)

if SPLIT_VERSION_OPTIMIZATION == True:
    save_latex_table("merged split version optimized", host_to_strategy_to_mean_splitversion_opt, host_to_strategy_to_confidence_interval_upper_splitversion_opt, host_to_strategy_to_confidence_interval_lower_splitversion_opt)
